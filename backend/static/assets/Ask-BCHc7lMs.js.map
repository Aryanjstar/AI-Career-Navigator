{"version":3,"file":"Ask-BCHc7lMs.js","sources":["../../../frontend/src/i18n/LanguagePicker.tsx","../../../frontend/src/components/layout/TwoColumnLayout.tsx","../../../frontend/src/pages/ask/Ask.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { LocalLanguage24Regular } from \"@fluentui/react-icons\";\nimport { IDropdownOption, Dropdown } from \"@fluentui/react\";\nimport { useId } from \"@fluentui/react-hooks\";\n\nimport { supportedLngs } from \"./config\";\nimport styles from \"./LanguagePicker.module.css\";\n\ninterface Props {\n    onLanguageChange: (language: string) => void;\n}\n\nexport const LanguagePicker = ({ onLanguageChange }: Props) => {\n    const { i18n } = useTranslation();\n\n    const handleLanguageChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<string> | undefined) => {\n        onLanguageChange(option?.data || i18n.language);\n    };\n    const languagePickerId = useId(\"languagePicker\");\n    const { t } = useTranslation();\n\n    return (\n        <div className={styles.languagePicker}>\n            <LocalLanguage24Regular className={styles.languagePickerIcon} />\n            <Dropdown\n                id={languagePickerId}\n                selectedKey={i18n.language}\n                options={Object.entries(supportedLngs).map(([code, details]) => ({\n                    key: code,\n                    text: details.name,\n                    selected: code === i18n.language,\n                    data: code\n                }))}\n                onChange={handleLanguageChange}\n                ariaLabel={t(\"labels.languagePicker\")}\n            />\n        </div>\n    );\n};\n","import React from \"react\";\nimport styles from \"./TwoColumnLayout.module.css\";\n\ninterface TwoColumnLayoutProps {\n    left: React.ReactNode;\n    right: React.ReactNode;\n}\n\nconst TwoColumnLayout: React.FC<TwoColumnLayoutProps> = ({ left, right }) => {\n    return (\n        <div className={styles.twoColumnRoot}>\n            <div className={styles.leftColumn}>{left}</div>\n            <div className={styles.rightColumn}>{right}</div>\n        </div>\n    );\n};\n\nexport default TwoColumnLayout;\n","import { useContext, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Panel, DefaultButton, Spinner } from \"@fluentui/react\";\n\nimport styles from \"./Ask.module.css\";\n\nimport { askApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFields, GPT4VInput, SpeechConfig } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\nimport { UploadFile } from \"../../components/UploadFile\";\nimport { Settings } from \"../../components/Settings/Settings\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { LoginContext } from \"../../loginContext\";\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\nimport TwoColumnLayout from \"../../components/layout/TwoColumnLayout\";\nimport FullScreenAnswer from \"../../components/FullScreenAnswer\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [maxSubqueryCount, setMaxSubqueryCount] = useState<number>(10);\n    const [resultsMergeStrategy, setResultsMergeStrategy] = useState<string>(\"interleaved\");\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [useQueryRewriting, setUseQueryRewriting] = useState<boolean>(false);\n    const [reasoningEffort, setReasoningEffort] = useState<string>(\"\");\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [includeCategory, setIncludeCategory] = useState<string>(\"\");\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [question, setQuestion] = useState<string>(\"\");\n    const [vectorFields, setVectorFields] = useState<VectorFields>(VectorFields.TextAndImageEmbeddings);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showQueryRewritingOption, setShowQueryRewritingOption] = useState<boolean>(false);\n    const [showReasoningEffortOption, setShowReasoningEffortOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n    const audio = useRef(new Audio()).current;\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [showAgenticRetrievalOption, setShowAgenticRetrievalOption] = useState<boolean>(false);\n    const [useAgenticRetrieval, setUseAgenticRetrieval] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<ChatAppResponse>();\n    // For the Ask tab, this array will hold a maximum of one URL\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\n\n    const speechConfig: SpeechConfig = {\n        speechUrls,\n        setSpeechUrls,\n        audio,\n        isPlaying,\n        setIsPlaying\n    };\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const [fullScreenAnswer, setFullScreenAnswer] = useState<null | { answer: ChatAppResponse }>(null);\n    const answerRef = useRef<HTMLDivElement | null>(null);\n\n    const getConfig = async () => {\n        configApi().then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setUseQueryRewriting(config.showQueryRewritingOption);\n            setShowQueryRewritingOption(config.showQueryRewritingOption);\n            setShowReasoningEffortOption(config.showReasoningEffortOption);\n            if (config.showReasoningEffortOption) {\n                setReasoningEffort(config.defaultReasoningEffort);\n            }\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n            setShowUserUpload(config.showUserUpload);\n            setshowLanguagePicker(config.showLanguagePicker);\n            setShowSpeechInput(config.showSpeechInput);\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\n            setShowAgenticRetrievalOption(config.showAgenticRetrievalOption);\n            setUseAgenticRetrieval(config.showAgenticRetrievalOption);\n            if (config.showAgenticRetrievalOption) {\n                setRetrieveCount(10);\n            }\n        });\n    };\n\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const request: ChatAppRequest = {\n                messages: [\n                    {\n                        content: question,\n                        role: \"user\"\n                    }\n                ],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                        include_category: includeCategory.length === 0 ? undefined : includeCategory,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        max_subqueries: maxSubqueryCount,\n                        results_merge_strategy: resultsMergeStrategy,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        query_rewriting: useQueryRewriting,\n                        reasoning_effort: reasoningEffort,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFields,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        language: i18n.language,\n                        use_agentic_retrieval: useAgenticRetrieval,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                // AI Chat Protocol: Client must pass on any session state received from the server\n                session_state: answer ? answer.session_state : null\n            };\n            const result = await askApi(request, token);\n            setAnswer(result);\n            setSpeechUrls([null]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSettingsChange = (field: string, value: any) => {\n        switch (field) {\n            case \"promptTemplate\":\n                setPromptTemplate(value);\n                break;\n            case \"promptTemplatePrefix\":\n                setPromptTemplatePrefix(value);\n                break;\n            case \"promptTemplateSuffix\":\n                setPromptTemplateSuffix(value);\n                break;\n            case \"temperature\":\n                setTemperature(value);\n                break;\n            case \"seed\":\n                setSeed(value);\n                break;\n            case \"minimumRerankerScore\":\n                setMinimumRerankerScore(value);\n                break;\n            case \"minimumSearchScore\":\n                setMinimumSearchScore(value);\n                break;\n            case \"retrieveCount\":\n                setRetrieveCount(value);\n                break;\n            case \"maxSubqueryCount\":\n                setMaxSubqueryCount(value);\n                break;\n            case \"resultsMergeStrategy\":\n                setResultsMergeStrategy(value);\n                break;\n            case \"useSemanticRanker\":\n                setUseSemanticRanker(value);\n                break;\n            case \"useSemanticCaptions\":\n                setUseSemanticCaptions(value);\n                break;\n            case \"useQueryRewriting\":\n                setUseQueryRewriting(value);\n                break;\n            case \"reasoningEffort\":\n                setReasoningEffort(value);\n                break;\n            case \"excludeCategory\":\n                setExcludeCategory(value);\n                break;\n            case \"includeCategory\":\n                setIncludeCategory(value);\n                break;\n            case \"useOidSecurityFilter\":\n                setUseOidSecurityFilter(value);\n                break;\n            case \"useGroupsSecurityFilter\":\n                setUseGroupsSecurityFilter(value);\n                break;\n            case \"useGPT4V\":\n                setUseGPT4V(value);\n                break;\n            case \"gpt4vInput\":\n                setGPT4VInput(value);\n                break;\n            case \"vectorFields\":\n                setVectorFields(value);\n                break;\n            case \"retrievalMode\":\n                setRetrievalMode(value);\n                break;\n            case \"useAgenticRetrieval\":\n                setUseAgenticRetrieval(value);\n        }\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n        setQuestion(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const { t, i18n } = useTranslation();\n\n    const isLongAnswer = (content: string) => {\n        if (!content) return false;\n        const lineCount = content.split(\"\\n\").length;\n        if (lineCount > 8) return true;\n        if (answerRef.current && answerRef.current.offsetHeight > 400) return true;\n        return false;\n    };\n\n    useEffect(() => {\n        if (answer && answer.message && answer.message.content) {\n            setTimeout(() => {\n                if (isLongAnswer(answer.message.content)) {\n                    setFullScreenAnswer({ answer });\n                }\n            }, 100);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [answer]);\n\n    return (\n        <TwoColumnLayout\n            left={\n                <>\n                    <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(true)} />\n                    <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                    <QuestionInput placeholder={t(\"placeholders.askQuestion\")} disabled={isLoading} onSend={question => makeApiRequest(question)} />\n                </>\n            }\n            right={\n                <div style={{ width: \"100%\" }}>\n                    {isLoading && <Spinner label={t(\"generatingAnswer\")} />}\n                    {!lastQuestionRef.current && (\n                        <div className={styles.askTopSection}>\n                            {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                        </div>\n                    )}\n                    {!isLoading && answer && !error && !fullScreenAnswer && (\n                        <div className={styles.askAnswerContainer} ref={answerRef}>\n                            <Answer\n                                answer={answer}\n                                index={0}\n                                speechConfig={speechConfig}\n                                isStreaming={false}\n                                onCitationClicked={x => onShowCitation(x)}\n                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                                showSpeechOutputAzure={showSpeechOutputAzure}\n                                showSpeechOutputBrowser={showSpeechOutputBrowser}\n                            />\n                        </div>\n                    )}\n                    {fullScreenAnswer && (\n                        <FullScreenAnswer answer={fullScreenAnswer.answer.message.content} onClose={() => setFullScreenAnswer(null)} backToHome />\n                    )}\n                    {error ? (\n                        <div className={styles.askAnswerContainer}>\n                            <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                        </div>\n                    ) : null}\n                    {activeAnalysisPanelTab && answer && (\n                        <AnalysisPanel\n                            className={styles.askAnalysisPanel}\n                            activeCitation={activeCitation}\n                            onActiveTabChanged={x => onToggleTab(x)}\n                            citationHeight=\"600px\"\n                            answer={answer}\n                            activeTab={activeAnalysisPanelTab}\n                        />\n                    )}\n                </div>\n            }\n        />\n    );\n}\n\nComponent.displayName = \"Ask\";\n"],"names":["LanguagePicker","onLanguageChange","i18n","useTranslation","handleLanguageChange","_ev","option","languagePickerId","useId","t","jsxs","styles","jsx","LocalLanguage24Regular","Dropdown","supportedLngs","code","details","TwoColumnLayout","left","right","Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","maxSubqueryCount","setMaxSubqueryCount","resultsMergeStrategy","setResultsMergeStrategy","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useQueryRewriting","setUseQueryRewriting","reasoningEffort","setReasoningEffort","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","includeCategory","setIncludeCategory","excludeCategory","setExcludeCategory","question","setQuestion","vectorFields","setVectorFields","VectorFields","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showQueryRewritingOption","setShowQueryRewritingOption","showReasoningEffortOption","setShowReasoningEffortOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","showSpeechInput","setShowSpeechInput","showSpeechOutputBrowser","setShowSpeechOutputBrowser","showSpeechOutputAzure","setShowSpeechOutputAzure","audio","useRef","isPlaying","setIsPlaying","showAgenticRetrievalOption","setShowAgenticRetrievalOption","useAgenticRetrieval","setUseAgenticRetrieval","lastQuestionRef","isLoading","setIsLoading","error","setError","answer","setAnswer","speechUrls","setSpeechUrls","speechConfig","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","useMsal","useContext","LoginContext","fullScreenAnswer","setFullScreenAnswer","answerRef","getConfig","configApi","config","useEffect","makeApiRequest","token","getToken","request","result","askApi","e","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","isLongAnswer","content","Fragment","SettingsButton","ExampleList","QuestionInput","Spinner","newLang","Answer","x","FullScreenAnswer","AnswerError","AnalysisPanel"],"mappings":"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"}