{"version":3,"mappings":";m5DAIMA,GAA0B,WAC1BC,GAAiC,gBAkDvC,eAAeC,IAAqC,CAC1C,MAAAC,EAAW,MAAM,MAAM,aAAa,EACtC,IAACA,EAAS,GACV,MAAM,IAAI,MAAM,mCAAmCA,EAAS,MAAM,EAAE,EAEjE,aAAMA,EAAS,MAC1B,CAEA,MAAMC,EAAY,MAAMF,KAEXG,GAAWD,EAAU,SAErBE,GAAuBF,EAAU,qBAEjCG,GAA8BH,EAAU,4BAExCI,GAAeF,IAAwB,CAACC,GAOxCE,GAAaL,EAAU,WAQRA,EAAU,aAEtC,MAAMM,GAAeN,EAAU,aAGlBO,GAAiB,IACnB,OAAO,SAAS,OAASP,EAAU,WAAW,KAAK,YAQ9D,WAAW,uBAAyB,KASpC,MAAMQ,GAAsB,IAAwC,CAC1D,MAAAC,EAAmBC,GAAuC,CACtD,MAAAC,MAAkB,KAExB,OADsB,IAAI,KAAKD,EAAiB,UAAU,EACnCC,CAAA,EAG3B,GAAI,WAAW,wBAA0BF,EAAgB,WAAW,sBAAsB,EAC/E,eAAQ,QAAQ,WAAW,sBAAsB,EAG5D,MAAMG,EAAoE,IAC/D,MAAMhB,EAAuB,EAAE,KAAUiB,GACxCA,EAAE,GACKA,EAAE,OAAO,KAAaC,GACrBA,EAAK,OAAS,EACP,CACH,SAAUA,EAAK,CAAC,EAAE,SAClB,aAAcA,EAAK,CAAC,EAAE,aACtB,YAAaA,EAAK,CAAC,EAAE,YAAe,OAAO,CAACC,EAA0BC,KAC9DD,EAAAC,EAAK,GAAG,EAAIA,EAAK,IACdD,GACR,EAAE,EACL,WAAYD,EAAK,CAAC,EAAE,UAAY,EAIjC,IACV,EAGE,IACV,EAGE,OAAAF,EAA4B,OAAcK,GACzCA,EACIR,EAAgBQ,CAAK,GACrB,WAAW,uBAAyBA,EAC7BA,GAGJ,MAAMpB,EAA8B,EAAE,KAAU,GAC/C,EAAE,GACKe,EAA0B,EAE9B,IACV,EAGE,IACV,CACL,EAEaM,GAA2B,MAAMV,GAA0B,QAa3DW,GAAgB,MAAOC,GAC5B,GAAAA,GACsBA,EAAO,oBAMR,MAAMZ,MAWtBa,EAAW,MAAOD,GAAkE,CACvF,MAAAV,EAAmB,MAAMF,KAC/B,OAAIE,EACO,QAAQ,QAAQA,EAAiB,YAAY,EAGjDU,EACF,mBAAmB,CAChB,GAAGd,GACH,YAAaC,GAAe,EAC/B,EACA,KAAKM,GAAKA,EAAE,WAAW,EACvB,MAAeS,GAAA,CACZ,QAAQ,IAAIA,CAAK,CACV,CACV,CACT,ECnNMC,GAAc,GAKpB,eAAsBC,EAAWC,EAA8D,CAEvF,OAAAxB,IAAY,CAACiB,IACTO,EACO,CAAE,cAAe,UAAUA,CAAO,EAAG,EAI7C,EACX,CAEA,eAAsBC,IAA6B,CAKvC,aAJS,MAAM,MAAM,GAAGH,EAAW,UAAW,CAClD,OAAQ,MACX,GAEsB,MAC3B,CAEsB,eAAAI,GAAOC,EAAyBH,EAAuD,CACnG,MAAAI,EAAU,MAAML,EAAWC,CAAO,EAClC1B,EAAW,MAAM,MAAM,GAAGwB,EAAW,OAAQ,CAC/C,OAAQ,OACR,QAAS,CAAE,GAAGM,EAAS,eAAgB,kBAAmB,EAC1D,KAAM,KAAK,UAAUD,CAAO,EAC/B,EAED,GAAI7B,EAAS,OAAS,KAAO,CAACA,EAAS,GACnC,MAAM,MAAM,8BAA8BA,EAAS,MAAM,EAAE,EAEzD,MAAA+B,EAAyC,MAAM/B,EAAS,OAC9D,GAAI+B,EAAe,MACT,YAAMA,EAAe,KAAK,EAG7B,OAAAA,CACX,CAEsB,eAAAC,GAAQH,EAAyBI,EAAuBP,EAAgD,CACtH,IAAAQ,EAAM,GAAGV,EAAW,QACpBS,IACOC,GAAA,WAEL,MAAAJ,EAAU,MAAML,EAAWC,CAAO,EACjC,aAAM,MAAMQ,EAAK,CACpB,OAAQ,OACR,QAAS,CAAE,GAAGJ,EAAS,eAAgB,kBAAmB,EAC1D,KAAM,KAAK,UAAUD,CAAO,EAC/B,CACL,CAEA,eAAsBM,GAAaC,EAAsC,CAC9D,aAAM,MAAM,UAAW,CAC1B,OAAQ,OACR,QAAS,CACL,eAAgB,kBACpB,EACA,KAAM,KAAK,UAAU,CACjB,KAAAA,CAAA,CACH,EACJ,EACI,KAAiBpC,GACVA,EAAS,QAAU,IACZA,EAAS,OACTA,EAAS,QAAU,KAC1B,QAAQ,IAAI,kCAAkC,EACvC,OAEP,QAAQ,MAAM,iCAAiC,EACxC,KAEd,EACA,KAAKqC,GAASA,EAAO,IAAI,gBAAgBA,CAAI,EAAI,IAAK,CAC/D,CAEO,SAASC,GAAoBC,EAA0B,CACnD,SAAGf,EAAW,YAAYe,CAAQ,EAC7C,CA+CsB,eAAAC,GAAmBvB,EAAWS,EAA+B,CACzE,MAAAI,EAAU,MAAML,EAAWC,CAAO,EAClC1B,EAAW,MAAM,MAAM,gBAAiB,CAC1C,OAAQ,OACR,QAAS,CAAE,GAAG8B,EAAS,eAAgB,kBAAmB,EAC1D,KAAM,KAAK,UAAUb,CAAI,EAC5B,EAEG,IAACjB,EAAS,GACV,MAAM,IAAI,MAAM,gCAAgCA,EAAS,UAAU,EAAE,EAIlE,OADmB,MAAMA,EAAS,MAE7C,CAEsB,eAAAyC,GAAsBC,EAAeC,EAAuCjB,EAAkD,CAC1I,MAAAI,EAAU,MAAML,EAAWC,CAAO,EACxC,IAAIQ,EAAM,GAAGV,EAAW,gCAAgCkB,CAAK,GACzDC,IACAT,GAAO,sBAAsBS,CAAiB,IAGlD,MAAM3C,EAAW,MAAM,MAAMkC,EAAI,WAAY,CACzC,OAAQ,MACR,QAAS,CAAE,GAAGJ,EAAS,eAAgB,kBAAmB,EAC7D,EAEG,IAAC9B,EAAS,GACV,MAAM,IAAI,MAAM,kCAAkCA,EAAS,UAAU,EAAE,EAIpE,OADsC,MAAMA,EAAS,MAEhE,CAEsB,eAAA4C,GAAkBC,EAAYnB,EAA8C,CACxF,MAAAI,EAAU,MAAML,EAAWC,CAAO,EAClC1B,EAAW,MAAM,MAAM,0BAA0B6C,CAAE,GAAI,CACzD,OAAQ,MACR,QAAS,CAAE,GAAGf,EAAS,eAAgB,kBAAmB,EAC7D,EAEG,IAAC9B,EAAS,GACV,MAAM,IAAI,MAAM,gCAAgCA,EAAS,UAAU,EAAE,EAIlE,OADkC,MAAMA,EAAS,MAE5D,CAEsB,eAAA8C,GAAqBD,EAAYnB,EAA+B,CAC5E,MAAAI,EAAU,MAAML,EAAWC,CAAO,EAClC1B,EAAW,MAAM,MAAM,0BAA0B6C,CAAE,GAAI,CACzD,OAAQ,SACR,QAAS,CAAE,GAAGf,EAAS,eAAgB,kBAAmB,EAC7D,EAEG,IAAC9B,EAAS,GACV,MAAM,IAAI,MAAM,iCAAiCA,EAAS,UAAU,EAAE,CAE9E,CC9LkB,IAAA+C,QACdA,EAAA,OAAS,SACTA,EAAA,QAAU,UACVA,EAAA,KAAO,OAHOA,QAAA,IAMAC,QACdA,EAAA,cAAgB,gBAChBA,EAAA,OAAS,SACTA,EAAA,MAAQ,QAHMA,QAAA,IAMAC,QACdA,EAAA,UAAY,oBACZA,EAAA,eAAiB,qBACjBA,EAAA,uBAAyB,yBAHXA,QAAA,2mBCHlB,SAASC,GAAgBC,EAAwBC,EAAoC,CAEjF,GAAI,CADU,uBACH,KAAKA,CAAiB,EACtB,SAIP,IAAAC,EACA,SAAM,QAAQF,CAAiB,EACbE,EAAAF,UACXA,GAAqB,MAAM,QAAQA,EAAkB,IAAI,EAChEE,EAAkBF,EAAkB,SAE7B,UAOJ,OAJiBE,EAAgB,KAAkBC,GAC/CA,EAAU,WAAWF,CAAiB,CAChD,CAGL,CAEgB,SAAAG,GAAkBC,EAAyBC,EAAsBC,EAAyE,CAChJ,MAAAP,EAAoBK,EAAO,QAAQ,YACnCG,EAAsB,GAG5B,IAAIC,EAAeJ,EAAO,QAAQ,QAAQ,KAAK,EAG/C,GAAIC,EAAa,CACb,IAAII,EAAYD,EAAa,OAC7B,QAASE,EAAIF,EAAa,OAAS,EAAGE,GAAK,GACnCF,EAAaE,CAAC,IAAM,IADkBA,IAG/B,GAAAF,EAAaE,CAAC,IAAM,IAAK,CACpBD,EAAAC,EACZ,KACJ,CAGWF,EADSA,EAAa,UAAU,EAAGC,CAAS,CAE/D,CA+BO,OACH,WA9BUD,EAAa,MAAM,eAAe,EAEd,IAAI,CAACG,EAAMC,IAAU,CAC/C,GAAAA,EAAQ,IAAM,EACP,OAAAD,EACJ,CACC,IAAAE,EAEJ,GAAI,CAACf,GAAgBC,EAAmBY,CAAI,EACxC,MAAO,IAAIA,CAAI,IAGfJ,EAAU,QAAQI,CAAI,IAAM,GACZE,EAAAN,EAAU,QAAQI,CAAI,EAAI,GAE1CJ,EAAU,KAAKI,CAAI,EACnBE,EAAgBN,EAAU,QAGxB,MAAAO,EAAO5B,GAAoByB,CAAI,EAE9B,OAAAI,GACFC,EAAA,SAAE,UAAU,eAAe,MAAOL,EAAM,QAAS,IAAML,EAAkBQ,CAAI,EAC1E,SAACE,MAAA,OAAK,UAAc,GACxB,EAER,EACH,EAGyB,KAAK,EAAE,EAC7B,UAAAT,CAAA,CAER,CCrFO,MAAMU,GAAa,UACdC,GAAgB,aAAa,yBAA0B,cAAY,OAAO,aAAW,aAAc,s7gECYlGC,GAAqE,CAC9E,GAAI,CACA,KAAM,QACN,OAAQ,OACZ,EACA,GAAI,CACA,KAAM,UACN,OAAQ,OACZ,EACA,GAAI,CACA,KAAM,UACN,OAAQ,OACZ,EACA,GAAI,CACA,KAAM,WACN,OAAQ,OACZ,EACA,GAAI,CACA,KAAM,MACN,OAAQ,OACZ,EACA,GAAI,CACA,KAAM,aACN,OAAQ,OACZ,EACA,KAAM,CACF,KAAM,uBACN,OAAQ,OACZ,EACA,GAAI,CACA,KAAM,SACN,OAAQ,OACZ,EACA,GAAI,CACA,KAAM,WACN,OAAQ,OACZ,CACJ,EAEAC,GACK,IAAIC,EAAO,EACX,IAAIC,EAAgB,EACpB,IAAIC,EAAgB,EAGpB,KAAK,CACF,UAAW,CACP,GAAI,CAAE,YAAaC,EAAc,EACjC,GAAI,CAAE,YAAaC,EAAc,EACjC,GAAI,CAAE,YAAaC,EAAc,EACjC,GAAI,CAAE,YAAaC,EAAc,EACjC,GAAI,CAAE,YAAaC,EAAc,EACjC,GAAI,CAAE,YAAaC,EAAc,EACjC,KAAM,CAAE,YAAaC,EAAgB,EACrC,GAAI,CAAE,YAAaC,EAAc,EACjC,GAAI,CAAE,YAAaC,EAAc,CACrC,EACA,YAAa,KACb,cAAe,OAAO,KAAKb,EAAa,EACxC,MAAO,GACP,cAAe,CACX,YAAa,EACjB,CACJ,CAAC,ECrEL,MAAMc,GAAmB,OAAe,iBAAoB,OAAe,sBAE3E,IAAIC,EAAgC,KAEpC,GAAI,CACQA,EAAAD,EACZ,MAAc,CACV,QAAQ,MAAM,kCAAkC,CACpD,CAEA,MAAME,GAAe,SAAUnD,EAAcoD,EAAkB,QAAS,CACpE,GAAIF,EAAO,CACD,MAAAG,EAAY,IAAI,yBAAyBrD,CAAI,EACnDqD,EAAU,KAAOD,EACjBC,EAAU,OAAS,EACnBA,EAAU,KAAO,EACjBA,EAAU,MAAQ,EAEd,IAAAC,EAAQJ,EAAM,YAAY,OAAQI,GAAgCA,EAAM,OAASF,CAAO,EAAE,CAAC,EAC/F,OAAKE,IACOA,EAAAJ,EAAM,UAAU,EAAE,OAAQI,GAAgCA,EAAM,OAAS,OAAO,EAAE,CAAC,GAG/FD,EAAU,MAAQC,EACXD,CACX,CACJ,EAEaE,GAAsB,CAAC,CAAE,OAAAnC,KAAoB,CACtD,KAAM,CAAE,EAAG,KAAAoC,CAAK,EAAIC,EAAe,EAC7BC,EAAaF,EAAK,SACpB,IAAAJ,EAAUjB,GAAcuB,CAAU,GAAG,OACpCN,IACSA,EAAA,SAEd,KAAM,CAACO,EAAWC,CAAY,EAAIC,WAAkB,EAAK,EAEnDC,EAAqB1C,GAAmB,CAC1C,GAAI8B,GAAS,KAAM,CACf,GAAIS,EAAW,CACXT,EAAM,OAAO,EACbU,EAAa,EAAK,EAClB,MACJ,CACM,MAAAP,EAAkDF,GAAa/B,EAAQgC,CAAO,EAEpF,GAAI,CAACC,EACD,OAGJH,EAAM,MAAMG,CAAS,EAErBA,EAAU,QAAU,IAAM,CACtBO,EAAa,EAAI,CACjB,EAGJP,EAAU,MAAQ,IAAM,CACpBO,EAAa,EAAK,CAClB,CAER,GAEEG,EAAQJ,EAAY,MAAQ,QAG9B,OAAA3B,EAAA,IAACgC,EAAA,CACG,MAAO,CAAE,MAAAD,CAAa,EACtB,UAAW,CAAE,SAAU,SAAU,EACjC,MAAO,EAAE,sBAAsB,EAC/B,UAAW,EAAE,sBAAsB,EACnC,QAAS,IAAMD,EAAkB1C,CAAM,EACvC,SAAU,CAAC8B,CAAA,EAGvB,ECxEae,GAAoB,CAAC,CAAE,OAAA7C,EAAQ,aAAA8C,EAAc,MAAAtC,EAAO,YAAAP,KAAyB,CACtF,KAAM,CAAC8C,EAAWC,CAAY,EAAIP,WAAS,EAAK,EAC1C,CAACQ,EAAmBC,CAAoB,EAAIT,WAAS,EAAK,EAC1D,CAAE,EAAAU,GAAMd,IAERe,EAAY,MAAO1E,GAAgB,CACrCoE,EAAa,MAAM,IAAMpE,EACzB,MAAMoE,EAAa,MACd,KAAK,EACL,KAAK,IAAM,CACKA,EAAA,MAAM,QAAU,IAAM,CAC/BA,EAAa,aAAa,EAAK,EAC/BI,EAAqB,EAAK,GAE9BJ,EAAa,aAAa,EAAI,EAC9BI,EAAqB,EAAI,EAC5B,EACA,MAAM,IAAM,CACT,MAAM,+BAA+B,EACrC,QAAQ,MAAM,+BAA+B,EAC7CJ,EAAa,aAAa,EAAK,EAC/BI,EAAqB,EAAK,EAC7B,GAGHR,EAAoB,MAAO1C,GAAmB,CAChD,GAAI8C,EAAa,UAAW,CACxBA,EAAa,MAAM,QACnBA,EAAa,MAAM,YAAc,EACjCA,EAAa,aAAa,EAAK,EAC/BI,EAAqB,EAAK,EAC1B,MACJ,CACI,GAAAJ,EAAa,WAAWtC,CAAK,EAAG,CACtB4C,EAAAN,EAAa,WAAWtC,CAAK,CAAC,EACxC,MACJ,CACAwC,EAAa,EAAI,EACjB,MAAMrE,GAAaqB,CAAM,EAAE,KAAK,MAAMqD,GAAa,CAC/C,GAAI,CAACA,EAAW,CACZ,MAAM,iCAAiC,EACvC,QAAQ,MAAM,iCAAiC,EAC/C,MACJ,CACAL,EAAa,EAAK,EACLF,EAAA,cAAcA,EAAa,WAAW,IAAI,CAACpE,EAAK4B,IAAOA,IAAME,EAAQ6C,EAAY3E,CAAI,CAAC,EACnG0E,EAAUC,CAAS,EACtB,GAGCV,EAAQM,EAAoB,MAAQ,QAG1C,OAAOF,EACFnC,MAAAgC,EAAA,CAAW,MAAO,CAAE,MAAAD,GAAgB,UAAW,CAAE,SAAU,MAAO,EAAG,MAAM,iBAAiB,UAAU,iBAAiB,SAAU,EAAM,GAGpIW,EAAA,KAAAC,WAAA,WAAA3C,EAAA,IAACgC,EAAW,WAAW,CAAE,SAAU,QAAU,WAAY,GAAM,SAAU,GAAM,MAAO,CAAE,QAAS,QAAU,EAC3GhC,EAAA,IAACgC,EAAA,CACG,MAAO,CAAE,MAAAD,CAAa,EACtB,UAAW,CAAE,SAAU,SAAU,EACjC,MAAOQ,EAAE,sBAAsB,EAC/B,UAAWA,EAAE,sBAAsB,EACnC,QAAS,IAAMT,EAAkB1C,CAAM,EACvC,SAAUC,CAAA,CACd,CACJ,GAER,EClDauD,GAAS,CAAC,CACnB,OAAAxD,EACA,MAAAQ,EACA,aAAAsC,EACA,WAAAW,EACA,YAAAxD,EACA,kBAAAC,EACA,wBAAAwD,EACA,2BAAAC,EACA,0BAAAC,EACA,sBAAAC,EACA,sBAAAC,EACA,wBAAAC,CACJ,IAAa,CACH,MAAAC,EAAoBhE,EAAO,SAAS,mBACpCI,EAAe6D,UAAQ,IAAMlE,GAAkBC,EAAQC,EAAaC,CAAiB,EAAG,CAACF,CAAM,CAAC,EAChG,CAAE,EAAAmD,GAAMd,IACR6B,EAAsBC,GAAU,SAAS/D,EAAa,UAAU,EAChE,CAACgE,EAAQC,CAAS,EAAI5B,WAAS,EAAK,EACpC,CAAC6B,EAAUC,CAAW,EAAI9B,WAAS,EAAK,EACxC+B,EAAgBC,SAAuB,IAAI,EAC3C,CAACC,GAAQC,EAAS,EAAIlC,WAAS,EAAK,EAE1CmC,YAAU,IAAM,CACZ,GAAIJ,EAAc,QAAS,CACvB,MAAMK,EAAKL,EAAc,QAEnBM,EAAYD,EAAG,UAAU,MAAM;AAAA,CAAI,EAAE,OAC3CF,GAAUE,EAAG,aAAe,KAAOC,EAAY,CAAC,CACpD,GACD,CAACZ,EAAqBjE,CAAW,CAAC,EAErC,MAAM8E,GAAa,IAAM,CAEf,MAAAC,EAAa,OAAOd,GAAwB,SAAWA,EAAoB,QAAQ,yCAA0C,EAAE,EAAI,GAEzI,UAAU,UACL,UAAUc,CAAU,EACpB,KAAK,IAAM,CACRX,EAAU,EAAI,EACd,WAAW,IAAMA,EAAU,EAAK,EAAG,GAAI,EAC1C,EACA,MAAMY,GAAO,QAAQ,MAAM,wBAAyBA,CAAG,CAAC,GAGjE,OACK3B,OAAA4B,EAAA,CAAM,UAAW,GAAGC,EAAO,eAAe,IAAI1B,GAAc0B,EAAO,QAAQ,GAAI,cAAc,gBAC1F,UAACvE,MAAAsE,EAAM,KAAN,CACG,SAAA5B,EAAA,KAAC4B,GAAM,WAAU,GAAC,gBAAgB,gBAC9B,UAAAtE,EAAA,IAACC,GAAW,WACX,MACG,WAAAD,EAAA,IAACgC,EAAA,CACG,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAUwB,EAAS,YAAc,MAAO,EACrD,MAAgBjB,EAATiB,EAAW,kBAAuB,eAAN,EACnC,UAAoBjB,EAATiB,EAAW,kBAAuB,eAAN,EACvC,QAASW,EAAA,CACb,EACAnE,EAAA,IAACgC,EAAA,CACG,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,WAAY,EACnC,MAAOO,EAAE,6BAA6B,EACtC,UAAWA,EAAE,6BAA6B,EAC1C,QAAS,IAAMO,EAAwB,EACvC,SAAU,CAAC1D,EAAO,QAAQ,UAAU,QAAUC,CAAA,CAClD,EACAW,EAAA,IAACgC,EAAA,CACG,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,eAAgB,EACvC,MAAOO,EAAE,gCAAgC,EACzC,UAAWA,EAAE,gCAAgC,EAC7C,QAAS,IAAMQ,EAA2B,EAC1C,SAAU,CAAC3D,EAAO,QAAQ,aAAeC,CAAA,CAC7C,EACC6D,GACIlD,MAAAiC,GAAA,CAAkB,OAAQqB,EAAqB,MAAA1D,EAAc,aAAAsC,EAA4B,YAAA7C,EAA0B,EAEvH8D,GAA2BnD,MAACuB,GAAoB,QAAQ+B,CAAqB,IAClF,GACJ,CACJ,GAECZ,EAAA,KAAA4B,EAAM,KAAN,CAAW,KAAI,GACZ,UAAAtE,EAAA,IAAC,OACG,UAAWuE,EAAO,WAClB,IAAKX,EACL,MACIE,IAAU,CAACJ,EACL,CACI,UAAW,IACX,SAAU,SACV,SAAU,WACV,gBAAiB,iDACjB,UAAW,gDAEf,GAAE,UAAW,OAAQ,SAAU,SAAU,EAGnD,SAAA1D,EAAA,IAACwE,GAAc,UAAUlB,EAAqB,cAAe,CAACmB,EAAS,EAAG,cAAe,CAACC,EAAS,CAAG,GAC1G,EACCZ,UACI,MAAI,OAAO,CAAE,UAAW,SAAU,UAAW,OAC1C,WAAA9D,EAAA,IAAC,UACG,QAAS,IAAM2D,EAAYgB,GAAK,CAACA,CAAC,EAClC,MAAO,CACH,WAAY,UACZ,MAAO,UACP,OAAQ,OACR,aAAc,SACd,QAAS,cACT,WAAY,IACZ,OAAQ,UACR,SAAU,KACd,EAEC,SAAWpC,EAAAmB,EAAE,WAAgB,WAAN,CAAiB,GAEjD,GAER,EAEC,CAAC,CAAClE,EAAa,UAAU,QACtBQ,EAAA,IAACsE,EAAM,KAAN,CACG,gBAACA,EAAM,YAAU,GAAC,KAAI,GAAC,OAAQ,CAAE,YAAa,CAC1C,YAAAtE,MAAC,QAAK,UAAWuE,EAAO,kBAAoB,SAAAhC,EAAE,mBAAmB,EAAE,EAClE/C,EAAa,UAAU,IAAI,CAACoF,EAAGlF,IAAM,CAC5B,MAAAI,GAAO5B,GAAoB0G,CAAC,EAClC,aACK,IAAU,WAAWL,EAAO,SAAU,MAAOK,EAAG,QAAS,IAAMtF,EAAkBQ,EAAI,EACjF,SAAG,KAAEJ,CAAC,KAAKkF,CAAC,IADTlF,CAER,EAEP,GACL,CACJ,GAGH,CAAC,CAAC0D,GAAmB,QAAUH,GAAyBD,GACpDhD,EAAA,IAAAsE,EAAM,KAAN,CACG,SAAC5B,OAAA4B,EAAA,CAAM,WAAU,GAAC,KAAI,GAAC,UAAW,GAAK9E,EAAa,UAAU,OAAS+E,EAAO,sBAAwB,EAAE,GAAI,OAAQ,CAAE,YAAa,CAC/H,YAAAvE,MAAC,QAAK,UAAWuE,EAAO,0BAA4B,SAAAhC,EAAE,mBAAmB,EAAE,EAC1Ea,EAAkB,IAAI,CAACwB,EAAGlF,IAElBM,MAAA,KAAU,UAAWuE,EAAO,iBAAkB,MAAOK,EAAG,QAAS,IAAM5B,EAA0B4B,CAAC,EAC9F,SAAG,GAAAA,CAAC,IADDlF,CAER,CAEP,GACL,CACJ,EAER,GAER,EChLamF,GAAgB,IAAM,CAC/B,KAAM,CAAE,EAAAtC,EAAG,KAAAf,CAAK,EAAIC,EAAe,EAC7BqD,EAAiBC,GAAU,CAC7B,KAAM,CAAE,QAAS,CAAE,EACnB,GAAI,CAAE,QAAS,CAAE,EACpB,EAED,OACK/E,MAAAgF,GAAS,IAAT,CAAa,MAAO,CAAE,GAAGF,GACtB,gBAACR,EAAM,WAAWC,EAAO,gBAAiB,cAAc,gBACpD,UAAAvE,EAAA,IAACC,GAAW,IACZD,MAACsE,EAAM,KAAN,CAAW,KAAI,GACZ,SAAC5B,EAAA,UAAE,UAAW6B,EAAO,WAChB,UAAAhC,EAAE,kBAAkB,EACpBvC,MAAA,QAAK,UAAWuE,EAAO,WAAa,IACzC,CACJ,GACJ,EACJ,EAER,ECjBaU,GAAc,CAAC,CAAE,MAAA9H,EAAO,QAAA+H,YAE5BZ,EAAM,WAAWC,EAAO,gBAAiB,cAAc,gBACpD,UAAAvE,MAACmF,IAAqB,cAAY,OAAO,aAAW,aAAa,YAAY,MAAM,EAElFnF,EAAA,IAAAsE,EAAM,KAAN,CAAW,KAAI,GACZ,SAACtE,EAAA,SAAE,UAAWuE,EAAO,WAAa,SAAApH,CAAM,GAC5C,EAEA6C,MAACoF,IAAc,UAAWb,EAAO,YAAa,QAASW,EAAS,KAAK,QAAQ,CACjF,oNCTFG,GAA6B,IAAM,CAC/B,MAAE,KAAA7D,GAASC,IACXC,EAAaF,EAAK,SACpB,IAAAJ,EAAUjB,GAAcuB,CAAU,GAAG,OACpCN,IACSA,EAAA,SAGR,MAAAkE,EAAqB,OAAe,mBAAsB,OAAe,wBAC/E,IAAIC,EAUO,KAEP,IACAA,EAAoB,IAAID,EACpBC,GAAqB,OACrBA,EAAkB,KAAOnE,EACzBmE,EAAkB,eAAiB,SAE7B,CACV,QAAQ,MAAM,iCAAiC,EAC3BA,EAAA,IACxB,CAEO,OAAAA,CACX,EAEaC,GAAc,CAAC,CAAE,eAAAC,KAA4B,CACtD,IAAIF,EAAoBF,KAClB,MAAE,EAAA9C,GAAMd,IACR,CAACiE,EAAaC,CAAc,EAAI9D,WAAkB,EAAK,EACvD+D,EAAiB,IAAM,CACzB,GAAIL,GAAqB,KAAM,CAC3B,QAAQ,MAAM,iCAAiC,EAC/C,MACJ,CAEkBA,EAAA,SAAYM,GAAmE,CAC7F,IAAIC,EAAQ,GACD,UAAAC,KAAUF,EAAM,QACdC,GAAAC,EAAO,CAAC,EAAE,WAEvBN,EAAeK,CAAK,GAExBP,EAAkB,MAAQ,IAAM,CAE5BI,EAAe,EAAK,GAENJ,EAAA,QAAWM,GAA6B,CAClDN,IACAA,EAAkB,KAAK,EACnBM,EAAM,OAAS,YACf,MAAM,gFAAgF,EAC/EA,EAAM,OAAS,yBACtB,MACI,sCAAsCA,EAAM,KAAK,iJAG/C,4CAAsCA,EAAM,KAAK,GAAG,EAElE,EAGJF,EAAe,EAAI,EACnBJ,EAAkB,MAAM,GAGtBS,EAAgB,IAAM,CACxB,GAAIT,GAAqB,KAAM,CAC3B,QAAQ,MAAM,iCAAiC,EAC/C,MACJ,CACAA,EAAkB,KAAK,EACvBI,EAAe,EAAK,GAGxB,OAAIJ,GAAqB,KACZvF,EAAA,IAAA2C,WAAA,IAIJD,EAAA,KAAAC,WAAA,WAAC,CAAA+C,GACG1F,MAAA,OAAI,UAAWuE,GAAO,8BACnB,SAAAvE,MAACiG,GAAQ,SAAS1D,EAAE,uBAAuB,EAAG,aAAa,QACvD,SAAAvC,EAAA,IAACkG,GAAO,MAAK,QAAQ,KAAOlG,MAAAmG,GAAA,CAAY,YAAY,wBAAyB,GAAI,QAASP,CAAgB,EAC9G,GACJ,EAEHF,GACG1F,EAAA,IAAC,MAAI,WAAWuE,GAAO,8BACnB,SAACvE,MAAAiG,GAAA,CAAQ,QAAS1D,EAAE,wBAAwB,EAAG,aAAa,QACxD,SAAAvC,MAACkG,GAAO,MAAK,QAAQ,KAAOlG,MAAAmG,GAAA,CAAY,YAAY,sBAAuB,GAAI,SAAU,CAACT,EAAa,QAASM,CAAe,EACnI,GACJ,CAER,GAER,EC3GaI,GAAeC,gBAAc,CACtC,SAAU,GACV,YAAcC,GAAe,CAAC,CAClC,CAAC,ECQYC,GAAgB,CAAC,CAAE,OAAAC,EAAQ,SAAAC,EAAU,YAAAC,EAAa,YAAAC,EAAa,aAAAC,EAAc,gBAAAC,KAA6B,CACnH,KAAM,CAACC,EAAUC,CAAW,EAAIlF,WAAiB,EAAE,EAC7C,CAAE,SAAAmF,CAAA,EAAaC,EAAA,WAAWb,EAAY,EACtC,CAAE,EAAA7D,GAAMd,IACR,CAACyF,EAAaC,CAAc,EAAItF,WAAS,EAAK,EAEpDmC,YAAU,IAAM,CACZ4C,GAAgBG,EAAYH,CAAY,GACzC,CAACA,CAAY,CAAC,EAEjB,MAAMQ,EAAe,IAAM,CACnBX,GAAY,CAACK,EAAS,SAI1BN,EAAOM,CAAQ,EAEXH,GACAI,EAAY,EAAE,EAClB,EAGEM,EAAgBC,GAAqC,CACnDJ,GAEAI,EAAG,MAAQ,SAAW,CAACA,EAAG,WAC1BA,EAAG,eAAe,EACLF,IACjB,EAGEG,EAAyB,IAAM,CACjCJ,EAAe,EAAI,GAEjBK,EAAuB,IAAM,CAC/BL,EAAe,EAAK,GAGlBM,EAAmB,CAACC,EAA8DC,IAAsB,CACrGA,EAEMA,EAAS,QAAU,KAC1BZ,EAAYY,CAAQ,EAFpBZ,EAAY,EAAE,CAGlB,EAGEa,EAA+B3L,IAAgB,CAAC+K,EAChDa,EAAuBpB,GAAY,CAACK,EAAS,QAAUc,EAE7D,OAAIA,IACclB,EAAA,sCAIbpC,EAAM,YAAU,GAAC,UAAWC,GAAO,uBAChC,UAAAvE,EAAA,IAAC8H,GAAA,CACG,UAAWvD,GAAO,sBAClB,SAAUqD,EACV,YAAAlB,EACA,UAAS,GACT,UAAW,GACX,WAAU,GACV,MAAOI,EACP,SAAUW,EACV,UAAWJ,EACX,mBAAoBE,EACpB,iBAAkBC,CAAA,CACtB,EACCxH,EAAA,WAAI,UAAWuE,GAAO,8BACnB,SAAAvE,EAAA,IAACiG,GAAQ,SAAS1D,EAAE,yBAAyB,EAAG,aAAa,QACzD,SAAAvC,MAACkG,GAAO,MAAK,QAAQ,KAAOlG,EAAA,IAAA+H,GAAA,CAAa,YAAY,yBAAyB,EAAI,SAAUF,EAAsB,QAAST,CAAc,EAC7I,GACJ,EACCP,GAAmB7G,MAACwF,GAAY,gBAAgBuB,CAAa,EAClE,GAER,mICxFaiB,GAAU,CAAC,CAAE,KAAAhK,EAAM,MAAAiK,EAAO,QAAAC,WAE9B,MAAI,WAAW3D,GAAO,QAAS,QAAS,IAAM2D,EAAQD,CAAK,EACxD,eAAC,IAAE,WAAW1D,GAAO,YAAc,WAAK,CAC5C,GCFK4D,GAAc,CAAC,CAAE,iBAAAC,EAAkB,SAAAC,KAAsB,CAC5D,MAAE,EAAA9F,GAAMd,IAER6G,EAA6B,CAAC/F,EAAE,mBAAmB,EAAGA,EAAE,mBAAmB,EAAGA,EAAE,mBAAmB,CAAC,EACpGgG,EAA2B,CAAChG,EAAE,iBAAiB,EAAGA,EAAE,iBAAiB,EAAGA,EAAE,iBAAiB,CAAC,EAG9F,OAAAvC,MAAC,KAAG,WAAWuE,GAAO,gBAChB,YAAWgE,EAAiBD,GAAkB,IAAI,CAACxB,EAAUpH,UAC1D,KACG,UAAAM,MAACgI,GAAQ,MAAMlB,EAAU,MAAOA,EAAU,QAASsB,CAAkB,IADhE1I,CAET,CACH,CACL,EAER,gICnBa8I,GAAkB,CAAC,CAAE,QAAAC,KAE1BzI,MAAC,MAAI,WAAWuE,GAAO,UACnB,SAACvE,EAAA,WAAI,UAAWuE,GAAO,QAAU,SAAAkE,CAAA,CAAQ,CAC7C,swBCHD,SAASC,GAA2B7L,EAA2C,CAG5E,MAAA8L,EAAQ9L,EAAK,MAAM,IAAI,EACvB+L,EAAQD,EAAM,CAAC,EACfE,EAAUtF,GAAU,SAASoF,EAAM,MAAM,CAAC,EAAE,KAAK,IAAI,CAAC,EAErD,OACH,MAAAC,EACA,QAAAC,CAAA,CAER,oWCVaC,GAAoB,CAAC,CAAE,kBAAAC,KAA+B,CAC/D,MAAMC,EAAY,MAAM,QAAQD,CAAiB,EAAIA,EAAoBA,EAAkB,KACrFE,EAAc,MAAM,QAAQF,CAAiB,EAAgC,GAA5BA,GAAmB,OAC1E,OACKrG,OAAA,MAAG,UAAW6B,GAAO,yBACjB,UAAUyE,EAAA,IAAI,CAACE,EAAGC,IAAQ,CACjB,MAAAC,EAASV,GAA2BQ,CAAC,EAC3C,OACKxG,OAAA,MAAG,UAAW6B,GAAO,sBAClB,UAAAvE,MAAC,KAAG,WAAWuE,GAAO,4BAA8B,WAAO,MAAM,EACjEvE,MAAC,IAAE,WAAWuE,GAAO,0BAA2B,wBAAyB,CAAE,OAAQ6E,EAAO,OAAW,GAFvD,8BAA2BD,CAAG,EAGhF,EAEP,EACAF,GAAY,IAAI,CAACI,EAAKF,IAEdnJ,EAAA,UAAG,UAAWuE,GAAO,sBAClB,SAACvE,EAAA,WAAI,UAAWuE,GAAO,2BAA4B,IAAK8E,CAAK,EADf,8BAA4BF,CAAG,EAEjF,CAEP,CACL,GAER,EC/BY,IAAAG,OACRA,EAAA,kBAAoB,iBACpBA,EAAA,qBAAuB,oBACvBA,EAAA,YAAc,WAHNA,OAAA,ICeL,MAAMC,GAAkD,CAAC,CAAE,WAAAC,EAAY,gBAAAC,KAAsB,CAChG,KAAM,CAAE,cAAAC,EAAe,kBAAAC,EAAmB,iBAAAC,EAAkB,aAAAC,GAAiBL,EAGvEM,EAAe7B,IAAmB4B,EAAgB5B,EAAQ4B,EAAgB,IAAM,GAAK,IAE3F,OACKnH,OAAA,OAAI,UAAW6B,EAAO,gBACnB,UAAAvE,EAAA,IAAC,MAAI,WAAWuE,EAAO,OAAQ,SAAW,gBAC1C7B,OAAC,OAAI,UAAW6B,EAAO,oBAAqB,MAAO,CAAE,MAAO,MACxD,YAACvE,MAAA,OAAI,UAAW,GAAGuE,EAAO,QAAQ,IAAIA,EAAO,SAAS,GAAI,MAAO,CAAE,MAAOuF,EAAYJ,CAAa,CAAE,EACjG,gBAAC,OAAK,WAAWnF,EAAO,WAAY,qBAASmF,CAAA,EAAc,CAC/D,GACCD,GAAmB,MAAQA,IAAoB,IAC5CzJ,EAAA,IAAC,OAAI,UAAW,GAAGuE,EAAO,QAAQ,IAAIA,EAAO,YAAY,GAAI,MAAO,CAAE,MAAOuF,EAAYF,CAAgB,CAAE,EACvG,SAAClH,EAAA,aAAK,UAAW6B,EAAO,WAAY,wBAAYqF,CAAA,EAAiB,CACrE,GAEJ5J,MAAC,OAAI,UAAW,GAAGuE,EAAO,QAAQ,IAAIA,EAAO,SAAS,GAAI,MAAO,CAAE,MAAOuF,EAAYH,EAAoBC,CAAgB,GACtH,SAAClH,OAAA,QAAK,UAAW6B,EAAO,WAAY,qBAASoF,EAAoBC,CAAA,EAAiB,CACtF,IACJ,EAEA5J,MAAC,OAAI,UAAW,GAAGuE,EAAO,QAAQ,IAAIA,EAAO,QAAQ,GAAI,MAAO,CAAE,MAAOuF,EAAYD,CAAY,GAC7F,SAACnH,OAAA,QAAK,UAAW6B,EAAO,WAAY,oBAAQsF,CAAA,EAAa,CAC7D,EACJ,GAER,ECrCAE,GAAkB,iBAAiB,OAAQpN,EAAI,EA0BxC,MAAMqN,GAA6B,CAAC,CAAE,WAAAC,EAAY,YAAAC,KAAkB,CAEvE,MAAMC,EAAWF,EAAW,KAAMG,GAAyCA,EAAK,OAAS,oBAAoB,EAGvGC,EAAUJ,EAAW,OAAQG,GAAuCA,EAAK,OAAS,kBAAkB,EAE1G,cACK,MACI,WACGD,GAAAnK,EAAA,IAACuJ,GAAA,CACG,WACI,CACI,cAAeY,EAAS,aACxB,kBAAmBA,EAAS,cAC5B,iBAAkB,EAClB,aAAcA,EAAS,aAAeA,EAAS,aACnD,EAER,EAGHnK,EAAA,WAAI,UAAWuE,EAAO,OAAQ,SAAU,eACxC8F,EAAQ,OAAS,UACb,QAAM,WAAW9F,EAAO,gBACrB,UAACvE,EAAA,aACG,gBAAC,KACG,WAAAA,MAAC,MAAG,SAAQ,aACZA,MAAC,MAAG,SAAkB,uBACtBA,MAAC,MAAG,SAAU,gBAClB,CACJ,SACC,QACI,UAAAqK,EAAQ,IAAIC,UACR,KACG,WAACtK,EAAA,UAAI,SAAEsK,EAAA,MAAM,OAAO,EACpBtK,MAAC,KAAI,UAAAsK,EAAE,KAAM,GACbtK,MAAC,KAAI,UAAAsK,EAAE,UAAW,EAHb,GAAAA,EAAE,EAIX,CACH,EACL,GACJ,CAER,GAER,EClEAP,GAAkB,iBAAiB,OAAQpN,EAAI,EAMxC,MAAM4N,GAAiB,CAAC,CAAE,SAAAC,KAEzBxK,MAAC,MAAG,UAAWuE,EAAO,MACjB,SAASiG,EAAA,IAAI,CAAC,EAAGrB,IAETzG,OAAA,MAAG,UAAW6B,EAAO,UAClB,UAAAvE,MAAC,MAAI,WAAWuE,EAAO,MAAQ,WAAE,MAAM,EACtCvE,EAAA,IAAAsE,EAAA,CAAM,WAAU,GAAC,OAAQ,CAAE,YAAa,CAAE,EACtC,SAAE,UACE,OAAO,KAAK,EAAE,KAAK,EAAE,OAAOmG,GAAKA,IAAM,eAAiBA,IAAM,YAAY,GAAK,IAAI,IAAKA,GACrF/H,EAAA,KAAC,OAAK,WAAW6B,EAAO,MACnB,UAAAkG,EAAE,KAAG,KAAK,UAAU,EAAE,QAAQA,CAAC,CAAC,IADDA,CAEpC,CACH,EACT,EACC,EAAE,OAAO,aAAezK,MAACuJ,GAAgB,YAAY,EAAE,MAAM,YAAa,gBAAiB,EAAE,MAAM,gBAAkB,GACrH,EAAE,OAAO,YAAevJ,EAAA,IAAAgK,GAAA,CAAU,WAAY,EAAE,MAAM,WAAY,YAAa,EAAE,WAAa,GAC9F,MAAM,QAAQ,EAAE,WAAW,EACvBhK,MAAA+J,GAAA,CAAkB,SAAS,OAAO,cAAa,GAAC,UAAWxF,EAAO,WAAY,MAAOmG,GACjF,cAAK,UAAU,EAAE,YAAa,KAAM,CAAC,CAC1C,GAEA1K,MAAC,MAAK,YAAE,WAAY,KAjBUmJ,CAmBtC,CAEP,CACL,wMChCKwB,GAAgD,CAAC,CAAE,IAAAC,KAAU,CACtE,KAAM,CAAC/B,EAASgC,CAAU,EAAIhJ,WAAiB,EAAE,EAC3C,CAACM,EAAWC,CAAY,EAAIP,WAAkB,EAAI,EAClD,CAAC1E,EAAO2N,CAAQ,EAAIjJ,WAAuB,IAAI,EAC/C,CAAE,EAAAU,GAAMd,IAMRsJ,EAAqBC,GAAqB,CAC5C,MAAMC,EAAkB,mBACjB,OAAAD,EAAS,QAAQC,EAAiB,EAAE,GAG/CjH,mBAAU,IAAM,EACU,SAAY,CAC1B,IACM,MAAApI,EAAW,MAAM,MAAMgP,CAAG,EAE5B,IAAChP,EAAS,GACJ,UAAI,MAAM,+BAA+B,EAG/C,IAAAsP,EAAe,MAAMtP,EAAS,OAClCsP,EAAeH,EAAkBG,CAAY,EAC7CL,EAAWK,CAAY,QAClB/N,EAAY,CACjB2N,EAAS3N,CAAK,SAChB,CACEiF,EAAa,EAAK,CACtB,KAGU,EACf,CAACwI,CAAG,CAAC,QAGH,MACI,UAAAzI,EACInC,MAAA,OAAI,UAAW,GAAGuE,EAAO,OAAO,IAAIA,EAAO,cAAc,GACtD,eAAC4G,GAAQ,MAAMC,GAAY,MAAO,MAAM,cAAe,GAC3D,EACAjO,EACA6C,MAAC,OAAI,UAAW,GAAGuE,EAAO,KAAK,IAAIA,EAAO,cAAc,GACpD,SAAC7B,EAAA,KAAA2I,GAAA,CAAW,eAAgBC,GAAe,MAAO,YAAa,GAC1D,UAAMnO,EAAA,cACNoO,GAAK,MAAMX,EAAK,SAAQ,GAAC,SAE1B,qBACJ,IACJ,EAEAlI,EAAA,KAAC,MACG,WAAA1C,EAAA,IAACgC,EAAA,CACG,UAAWuC,EAAO,eAClB,MAAO,CAAE,MAAO,OAAQ,EACxB,UAAW,CAAE,SAAU,MAAO,EAC9B,MAAOhC,EAAE,eAAe,EACxB,UAAWA,EAAE,eAAe,EAC5B,KAAMqI,EACN,SAAQ,GACZ,EACC5K,EAAA,IAAAwE,GAAA,CAAc,SAAUqE,EAAS,cAAe,CAACnE,EAAS,EAAG,UAAW,GAAGH,EAAO,QAAQ,IAAIA,EAAO,cAAc,GAAI,EAC5H,EAER,EAER,ECzDMiH,GAAyB,CAAE,SAAU,GAAM,MAAO,CAAE,MAAO,SAEpDC,GAAgB,CAAC,CAAE,OAAArM,EAAQ,UAAAsM,EAAW,eAAAC,EAAgB,eAAAC,EAAgB,UAAAC,EAAW,mBAAAC,KAAgC,CACpH,MAAAC,EAAuC,CAAC3M,EAAO,QAAQ,SACvD4M,EAA0C,CAAC5M,EAAO,QAAQ,YAC1D6M,EAAiC,CAACN,EAClC,CAACxN,EAAU+N,CAAW,EAAIrK,WAAS,EAAE,EAErC5E,EAASnB,GAAWqQ,GAAQ,EAAE,SAAW,OACzC,CAAE,EAAA5J,GAAMd,IAER2K,EAAgB,SAAY,CAC9B,MAAMtP,EAAQG,EAAS,MAAMC,EAASD,CAAM,EAAI,OAChD,GAAI0O,EAAgB,CAGV,MAAAU,EAAeV,EAAe,QAAQ,GAAG,EAAIA,EAAe,MAAM,GAAG,EAAE,CAAC,EAAI,GAK5EW,EAAkB,MAJP,MAAM,MAAMX,EAAgB,CACzC,OAAQ,MACR,QAAS,MAAMtO,EAAWP,CAAK,EAClC,GACsC,OACnC,IAAAyP,EAAoB,IAAI,gBAAgBD,CAAe,EAEvDD,IACAE,GAAqB,IAAMF,GAE/BH,EAAYK,CAAiB,CACjC,GAEJvI,YAAU,IAAM,CACEoI,GAClB,EAAG,CAAE,GAEL,MAAMI,EAAmB,IAAM,CAC3B,GAAI,CAACb,EACM,YAIX,OADsBA,EAAe,MAAM,GAAG,EAAE,OAAO,cAChC,CACnB,IAAK,MACM,OAAA3L,MAAC,OAAI,IAAK7B,EAAU,UAAWoG,EAAO,YAAa,IAAI,gBAAiB,GACnF,IAAK,KACM,OAAAvE,EAAA,IAAC2K,GAAe,KAAKgB,CAAgB,GAChD,QACW,OAAA3L,MAAC,UAAO,MAAM,WAAW,IAAK7B,EAAU,MAAM,OAAO,OAAQyN,CAAgB,EAC5F,GAIA,OAAAlJ,EAAA,KAAC+J,GAAA,CACG,UAAAZ,EACA,YAAaH,EACb,YAA0BgB,MAAaZ,EAAmBY,EAAU,MAAM,OAA6B,EAEvG,UAAA1M,EAAA,IAAC2M,GAAA,CACG,QAASrD,EAAkB,kBAC3B,WAAY/G,EAAE,4BAA4B,EAC1C,kBAAmBwJ,EAA8BP,GAAyB,OAE1E,eAACjB,GAAe,UAAUnL,EAAO,QAAQ,UAAY,GAAI,EAC7D,EACAY,EAAA,IAAC2M,GAAA,CACG,QAASrD,EAAkB,qBAC3B,WAAY/G,EAAE,+BAA+B,EAC7C,kBAAmByJ,EAAiCR,GAAyB,OAE7E,SAACxL,EAAA,IAAA8I,GAAA,CAAkB,kBAAmB1J,EAAO,QAAQ,YAAa,EACtE,EACAY,EAAA,IAAC2M,GAAA,CACG,QAASrD,EAAkB,YAC3B,WAAY/G,EAAE,sBAAsB,EACpC,kBAAmB0J,EAAwBT,GAAyB,OAEnE,SAAiBgB,EAAA,EACtB,IAGZ,2jBCpFO,SAASI,GAAY,CAAE,KAAA/P,EAAM,SAAAgQ,EAAU,SAAAC,GAA8B,CACxE,KAAM,CAACC,EAAaC,CAAc,EAAInL,WAAS,EAAK,EAE9CoL,EAAeC,cAAY,IAAM,CACnCF,EAAe,EAAK,EACpBF,EAASjQ,EAAK,EAAE,CACjB,GAACA,EAAK,GAAIiQ,CAAQ,CAAC,EAEtB,OACKpK,OAAA,OAAI,UAAW6B,EAAO,YACnB,UAAAvE,MAAC,UAAO,QAAS,IAAM6M,EAAShQ,EAAK,EAAE,EAAG,UAAW0H,EAAO,kBACxD,eAAC,MAAI,WAAWA,EAAO,iBAAmB,SAAA1H,EAAK,KAAM,GACzD,QACC,SAAO,SAAS,IAAMmQ,EAAe,EAAI,EAAG,UAAWzI,EAAO,aAAc,aAAW,2BACpF,SAAAvE,MAACmN,IAAgB,UAAW5I,EAAO,UAAY,GACnD,EACAvE,MAACoN,GAAmB,QAAQL,EAAa,QAAS,IAAMC,EAAe,EAAK,EAAG,UAAWC,CAAc,EAC5G,GAER,CAEA,SAASG,GAAmB,CAAE,OAAAC,EAAQ,QAAAC,EAAS,UAAAC,GAA8E,CACrH,IAACF,EAAe,YACd,MAAE,EAAA9K,GAAMd,IAEV,OAAAzB,EAAA,IAAC,OAAI,UAAWuE,EAAO,aACnB,SAAC7B,EAAA,YAAI,UAAW6B,EAAO,aACnB,UAAAvE,MAAC,MAAG,UAAWuE,EAAO,WAAa,SAAAhC,EAAE,0BAA0B,EAAE,QAChE,IAAE,WAAWgC,EAAO,iBAAmB,SAAAhC,EAAE,gCAAgC,EAAE,EAC3EG,EAAA,YAAI,UAAW6B,EAAO,aACnB,UAACvE,MAAAwN,GAAA,CAAc,QAASF,EAAS,UAAW/I,EAAO,kBAC9C,SAAAhC,EAAE,qBAAqB,CAC5B,GACAvC,MAACwN,IAAc,QAASD,EAAW,UAAWhJ,EAAO,mBAChD,SAAEhC,EAAA,qBAAqB,CAC5B,IACJ,EACJ,EACJ,EAER,CCrDkB,IAAAkL,OACdA,EAAA,KAAO,OACPA,EAAA,UAAY,YACZA,EAAA,SAAW,WAHGA,OAAA,ICHX,MAAMC,EAAyC,CAClD,gBAAkB,IAAMD,EAAuB,KAC/C,wBAA+B,CAE/B,CACA,MAAM,aAAanP,EAA2C,CAC1D,MAAO,EACX,CACA,MAAM,QAAQG,EAAYkP,EAAiC,CAE3D,CACA,MAAM,QAAQlP,EAA2B,CAC9B,WACX,CACA,MAAM,WAAWA,EAA2B,CAE5C,CACJ,CChBO,MAAMmP,EAA8C,CACvD,gBAAkB,IAAMH,EAAuB,UAEvC,OACA,UACA,UAA0C,KAC1C,UACA,WAAsB,GAE9B,YAAYI,EAAgBC,EAAmB,CAC3C,KAAK,OAASD,EACd,KAAK,UAAYC,EACjB,KAAK,UAAY,OACjB,KAAK,WAAa,EACtB,CAEA,MAAc,MAAO,CACjB,MAAMA,EAAY,KAAK,UACnB,OAAC,KAAK,YACN,KAAK,UAAYC,GAAO,KAAK,OAAQ,EAAG,CACpC,QAAQC,EAAI,CACHA,EAAG,iBAAiB,SAASF,CAAS,GACzBE,EAAG,kBAAkBF,EAAW,CAAE,QAAS,KAAM,EACzD,YAAY,YAAa,WAAW,CAElD,EACH,GAEE,KAAK,SAChB,CAEA,wBAAyB,CACrB,KAAK,UAAY,OACjB,KAAK,WAAa,EACtB,CAEA,MAAM,aAAaxP,EAA2C,CAIpD,MAAAsB,GAHK,MAAM,KAAK,QACR,YAAY,KAAK,UAAW,UAAU,EACnC,YAAY,KAAK,SAAS,EACvB,MAAM,WAAW,EAGrC,GAAI,KAAK,WACL,MAAO,GAIX,IAAIqO,EAAS,KAAK,UAAY,MAAMrO,EAAM,WAAW,YAAY,WAAW,KAAK,SAAS,EAAG,MAAM,EAAI,MAAMA,EAAM,WAAW,KAAM,MAAM,EAG1I,GAAI,CAACqO,EACD,YAAK,WAAa,GACX,GAGX,MAAMC,EAAoF,GAC1F,QAASxO,EAAI,EAAGA,EAAIpB,GAAS2P,EAAQvO,IACrBwO,EAAA,KAAKD,EAAO,KAAK,EACpBA,EAAA,MAAMA,EAAO,WAI1B,OAAKA,IACD,KAAK,WAAa,IAItB,KAAK,UAAYA,GAAQ,IAElBC,CACX,CAEA,MAAM,QAAQzP,EAAYkP,EAAiC,CACvD,MAAMQ,EAAY,IAAI,KAAK,EAAE,QAAQ,EAE/BC,GADK,MAAM,KAAK,QACR,YAAY,KAAK,UAAW,WAAW,EAC/CC,EAAU,MAAMD,EAAG,YAAY,KAAK,SAAS,EAAE,IAAI3P,CAAE,EAC3D,GAAI4P,EACA,MAAMD,EAAG,YAAY,KAAK,SAAS,EAAE,IAAI,CAAE,GAAGC,EAAS,GAAA5P,EAAI,UAAA0P,EAAW,QAAAR,CAAS,OAC5E,CACG,MAAA/E,EAAQ+E,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,GAAKA,EAAQ,CAAC,EAAE,CAAC,EAAE,UAAU,EAAG,EAAE,EAAI,MAAQA,EAAQ,CAAC,EAAE,CAAC,EACzF,MAAAS,EAAG,YAAY,KAAK,SAAS,EAAE,IAAI,CAAE,GAAA3P,EAAI,MAAAmK,EAAO,UAAAuF,EAAW,QAAAR,CAAS,EAC9E,CACA,MAAMS,EAAG,IAEb,CAEA,MAAM,QAAQ3P,EAAqC,CAGzC,MAAA5B,EAAO,MAFF,MAAM,KAAK,QACR,YAAY,KAAK,UAAW,UAAU,EAC9B,YAAY,KAAK,SAAS,EAAE,IAAI4B,CAAE,EACjD,OAAA5B,EAAOA,EAAK,QAAU,IACjC,CAEA,MAAM,WAAW4B,EAA2B,CAExC,MADW,MAAM,KAAK,QACb,OAAO,KAAK,UAAWA,CAAE,CAEtC,CACJ,CCpGO,MAAM6P,EAA6C,CACtD,gBAAkB,IAAMb,EAAuB,SAEvC,kBACA,UAAqB,GAE7B,wBAAyB,CACrB,KAAK,kBAAoB,OACzB,KAAK,UAAY,EACrB,CAEA,MAAM,aAAanP,EAAehB,EAA8C,CAC5E,GAAI,KAAK,UACL,MAAO,GAGP,IACA,MAAM1B,EAAW,MAAMyC,GAAsBC,EAAO,KAAK,kBAAmBhB,GAAW,EAAE,EACzF,YAAK,kBAAoB1B,EAAS,mBAC7B,KAAK,oBACN,KAAK,UAAY,IAEdA,EAAS,SAAS,IAAgB2S,IAAA,CACrC,GAAIA,EAAQ,GACZ,MAAOA,EAAQ,MACf,UAAWA,EAAQ,SACrB,UACG5J,EAAG,CACR,eAAQ,MAAMA,CAAC,EACR,EACX,CACJ,CAEA,MAAM,QAAQlG,EAAYkP,EAAkBrQ,EAAiC,CACzE,MAAMc,GAAmB,CAAE,GAAAK,EAAI,QAAAkP,CAAQ,EAAGrQ,GAAW,EAAE,CAE3D,CAEA,MAAM,QAAQmB,EAAYnB,EAA2C,CAEjE,OADiB,MAAMkB,GAAkBC,EAAInB,GAAW,EAAE,GAC1C,SAAW,IAC/B,CAEA,MAAM,WAAWmB,EAAYnB,EAAiC,CACpD,MAAAoB,GAAqBD,EAAInB,GAAW,EAAE,CAEhD,CACJ,CC5Ca,MAAAkR,GAAqBC,GACLpL,UAAQ,IAAM,CACnC,OAAQoL,EAAU,CACd,KAAKhB,EAAuB,UACjB,WAAIG,GAAkB,gBAAiB,cAAc,EAChE,KAAKH,EAAuB,SACxB,OAAO,IAAIa,GACf,KAAKb,EAAuB,KAC5B,QACI,OAAO,IAAIC,EACnB,GACD,CAACe,CAAQ,CAAC,2GCPXC,GAAyB,GAElBC,GAAe,CAAC,CACzB,SAAAF,EACA,OAAApB,EACA,OAAAuB,EACA,QAAAtB,EACA,eAAAuB,CACJ,IAMM,CACI,MAAAC,EAAiBN,GAAkBC,CAAQ,EAC3C,CAACM,EAASC,CAAU,EAAInN,EAAA,SAA4B,CAAE,GACtD,CAACM,EAAWC,CAAY,EAAIP,WAAS,EAAK,EAC1C,CAACoN,EAAgBC,CAAiB,EAAIrN,WAAS,EAAK,EAEpD5E,EAASnB,GAAWqQ,GAAQ,EAAE,SAAW,OAE/CnI,YAAU,IAAM,CACPqJ,GACDuB,IACAI,EAAW,CAAE,GACbF,EAAe,uBAAuB,EACtCI,EAAkB,EAAI,EAC1B,EACD,CAAC7B,EAAQuB,CAAM,CAAC,EAEnB,MAAMO,EAAkB,SAAY,CAChC/M,EAAa,IAAM,EAAI,EACvB,MAAMtF,EAAQG,EAAS,MAAMC,EAASD,CAAM,EAAI,OAC1CmS,EAAQ,MAAMN,EAAe,aAAaJ,GAAwB5R,CAAK,EACzEsS,EAAM,SAAW,GACjBF,EAAkB,EAAK,EAE3BF,KAA0B,CAAC,GAAGK,EAAa,GAAGD,CAAK,CAAC,EACpDhN,EAAa,IAAM,EAAK,GAGtBkN,EAAe,MAAO7Q,GAAe,CACvC,MAAM3B,EAAQG,EAAS,MAAMC,EAASD,CAAM,EAAI,OAC1CJ,EAAO,MAAMiS,EAAe,QAAQrQ,EAAI3B,CAAK,EAC/CD,GACAgS,EAAehS,CAAI,CACvB,EAGEoQ,EAAe,MAAOxO,GAAe,CACvC,MAAM3B,EAAQG,EAAS,MAAMC,EAASD,CAAM,EAAI,OAC1C,MAAA6R,EAAe,WAAWrQ,EAAI3B,CAAK,EACzCkS,KAA0BK,EAAY,WAAexS,GAAK,KAAO4B,CAAE,CAAC,GAGlE8Q,EAAiBlM,UAAQ,IAAMmM,GAAaT,CAAO,EAAG,CAACA,CAAO,CAAC,EAE/D,CAAE,EAAAxM,GAAMd,IAGV,OAAAzB,EAAA,IAACyP,GAAA,CACG,KAAMC,GAAU,WAChB,MAAO,CAAE,QAAS,KAAM,EACxB,WAAYnN,EAAE,qBAAqB,EACnC,YAAY,QACZ,WAAY,GACZ,OAAA8K,EACA,UAAW,IAAMC,EAAQ,EACzB,YAAa,IAAM,CACf0B,EAAW,CAAE,GACbE,EAAkB,EAAI,EACtBJ,EAAe,uBAAuB,CAC1C,EAEA,gBAAC,MACI,kBAAO,QAAQS,CAAc,EAAE,IAAI,CAAC,CAACI,EAAOP,CAAK,IAC9C1M,EAAA,KAAC,MAAgB,WAAW6B,GAAO,MAC/B,UAAAvE,MAAC,KAAE,UAAWuE,GAAO,WAAa,SAAAhC,EAAEoN,CAAK,EAAE,EAC1CP,EAAM,IACHvS,GAAAmD,EAAA,IAAC4M,GAA0B,MAAA/P,EAAY,SAAUyS,EAAc,SAAUrC,CAAA,EAAvDpQ,EAAK,EAAgE,CAC1F,IAJK8S,CAKV,CACH,EACAxN,GAAcnC,EAAA,IAAAmL,GAAA,CAAQ,MAAO,CAAE,UAAW,QAAU,EACpD4D,EAAQ,SAAW,GAAK,CAAC5M,GAAcnC,MAAA,KAAG,SAAEuC,EAAA,mBAAmB,CAAE,GACjE0M,GAAkB,CAAC9M,GAAcnC,EAAA,IAAA4P,GAAA,CAAsB,KAAMT,EAAiB,GACnF,GAGZ,EAEA,SAASK,GAAaT,EAAwB,CACpC,MAAAc,MAAY,KAClBA,EAAM,SAAS,EAAG,EAAG,EAAG,CAAC,EACnB,MAAAC,EAAY,IAAI,KAAKD,CAAK,EAChCC,EAAU,QAAQA,EAAU,QAAQ,EAAI,CAAC,EACnC,MAAAC,EAAW,IAAI,KAAKF,CAAK,EAC/BE,EAAS,QAAQA,EAAS,QAAQ,EAAI,CAAC,EACjC,MAAAC,EAAY,IAAI,KAAKH,CAAK,EAChC,OAAAG,EAAU,QAAQA,EAAU,QAAQ,EAAI,EAAE,EAEnCjB,EAAQ,OACX,CAACkB,EAAQpT,IAAS,CACd,MAAMqT,EAAW,IAAI,KAAKrT,EAAK,SAAS,EACpC,IAAA8S,EAEJ,OAAIO,GAAYL,EACJF,EAAA,gBACDO,GAAYJ,EACXH,EAAA,oBACDO,GAAYH,EACXJ,EAAA,oBACDO,GAAYF,EACXL,EAAA,qBAEAA,EAAAO,EAAS,mBAAmB,OAAW,CAAE,KAAM,UAAW,MAAO,OAAQ,EAGhFD,EAAON,CAAK,IACNM,EAAAN,CAAK,EAAI,IAEbM,EAAAN,CAAK,EAAE,KAAK9S,CAAI,EAChBoT,CACX,EACA,CAAC,EAET,CAEA,MAAML,GAAwB,CAAC,CAAE,KAAAO,KAAiC,CACxD,MAAAC,EAAYvM,SAAO,IAAI,EAE7BG,mBAAU,IAAM,CACZ,MAAMqM,EAAW,IAAI,qBACNC,GAAA,CACPA,EAAQ,QAAiBC,GAAA,CACjBA,EAAM,gBACFH,EAAU,SACLD,GAEb,CACH,CACL,EACA,CACI,KAAM,KACN,UAAW,CACf,GAGJ,OAAIC,EAAU,SACDC,EAAA,QAAQD,EAAU,OAAO,EAG/B,IAAM,CACLA,EAAU,SACDC,EAAA,UAAUD,EAAU,OAAO,CACxC,CAER,EAAG,CAAE,GAEGpQ,MAAA,UAAO,IAAKoQ,EAAW,QAASD,CAAM,EAClD,4CC/JaK,GAAgB,CAAC,CAAE,UAAA3E,EAAW,SAAApF,EAAU,QAAAyB,KAAqB,CAChE,MAAE,EAAA3F,GAAMd,IAEV,OAAAzB,EAAA,IAAC,OAAI,UAAW,GAAGuE,GAAO,SAAS,IAAIsH,GAAa,EAAE,GAClD,eAAC3F,GAAO,YAAOuK,GAAiB,IAAI,SAAAhK,EAAoB,QAAAyB,EACnD,SAAA3F,EAAE,yBAAyB,CAChC,EACJ,EAER,4CCVamO,GAAiB,CAAC,CAAE,UAAA7E,EAAW,QAAA3D,KAAqB,CACvD,MAAE,EAAA3F,GAAMd,IAEV,OAAAzB,MAAC,OAAI,UAAW,GAAGuE,GAAO,SAAS,IAAIsH,GAAa,EAAE,GAClD,eAAC3F,GAAO,YAAOyK,GAAkB,IAAI,QAAAzI,EAChC,SAAE3F,EAAA,mBAAmB,CAC1B,EACJ,EAER,4CCRaqO,GAAkB,CAAC,CAAE,UAAA/E,EAAW,SAAApF,EAAU,QAAAyB,KAAqB,CACxE,KAAM,CAAE,EAAA3F,EAAG,KAAAf,CAAK,EAAIC,EAAe,EAE/B,OAAAzB,EAAA,IAAC,OAAI,UAAW,GAAGuE,GAAO,SAAS,IAAIsH,GAAa,EAAE,GAClD,eAAC3F,GAAO,YAAOiH,GAAgB,IAAI,SAAA1G,EAAoB,QAAAyB,EAClD,SAAA3F,EAAE,WAAW,CAClB,EACJ,EAER,ECOasO,GAAkBxK,gBAA+C,MAAS,EC5B3E,IAAAyK,QACRA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,MAAQ,QAHAA,QAAA,sJCSNC,GAAoD,CAAC,CAAE,OAAA3R,EAAQ,QAAAkO,KAE5D5K,OAAA,OAAI,UAAW6B,GAAO,eACnB,UAACvE,MAAA,UAAO,UAAWuE,GAAO,YAAa,QAAS+I,EAAS,aAAW,QAAQ,SAE5E,WACCtN,EAAA,WAAI,UAAWuE,GAAO,cAAgB,SAAOnF,EAAA,CAClD,ICoCF4R,GAAO,IAAM,CACf,KAAM,CAACC,EAAmBC,CAAoB,EAAIrP,WAAS,EAAK,EAC1D,CAACsP,EAAoBC,CAAqB,EAAIvP,WAAS,EAAK,EAC5D,CAACwP,EAAgBC,CAAiB,EAAIzP,WAAiB,EAAE,EACzD,CAAC0P,EAAaC,CAAc,EAAI3P,WAAiB,EAAG,EACpD,CAAC4P,EAAMC,CAAO,EAAI7P,WAAwB,IAAI,EAC9C,CAAC8P,EAAsBC,CAAuB,EAAI/P,WAAiB,CAAC,EACpE,CAACgQ,EAAoBC,CAAqB,EAAIjQ,WAAiB,CAAC,EAChE,CAACkQ,EAAeC,CAAgB,EAAInQ,WAAiB,CAAC,EACtD,CAACoQ,EAAkBC,CAAmB,EAAIrQ,WAAiB,EAAE,EAC7D,CAACsQ,EAAsBC,CAAuB,EAAIvQ,WAAiB,aAAa,EAChF,CAACwQ,EAAeC,EAAgB,EAAIzQ,WAAwBlD,GAAc,MAAM,EAChF,CAAC4T,GAAmBC,EAAoB,EAAI3Q,WAAkB,EAAI,EAClE,CAAC4Q,EAAmBC,CAAoB,EAAI7Q,WAAkB,EAAK,EACnE,CAAC4H,GAAiBkJ,EAAkB,EAAI9Q,WAAiB,EAAE,EACjBA,WAAkB,EAAI,EACtE,KAAM,CAAChE,GAAc+U,EAAe,EAAI/Q,WAAkB,EAAI,EACxD,CAACgR,GAAqBC,EAAsB,EAAIjR,WAAkB,EAAK,EACvE,CAACkR,GAAiBC,EAAkB,EAAInR,WAAiB,EAAE,EAC3D,CAACoR,GAAiBC,EAAkB,EAAIrR,WAAiB,EAAE,EAC3D,CAACsR,GAA6BC,EAA8B,EAAIvR,WAAkB,EAAK,EACvF,CAACwR,GAAcC,EAAe,EAAIzR,WAAuBhD,GAAa,sBAAsB,EAC5F,CAAC0U,GAAsBC,EAAuB,EAAI3R,WAAkB,EAAK,EACzE,CAAC4R,GAAyBC,EAA0B,EAAI7R,WAAkB,EAAK,EAC/E,CAAC8R,GAAYC,EAAa,EAAI/R,WAAqBjD,GAAW,aAAa,EAC3E,CAACyJ,GAAUwL,EAAW,EAAIhS,WAAkB,EAAK,EAEjDiS,EAAkBjQ,SAAe,EAAE,EACnCkQ,GAAmBlQ,SAA8B,IAAI,EACrDmQ,GAAanQ,SAAkC,EAAE,EAEjD,CAAC1B,GAAWC,EAAY,EAAIP,WAAkB,EAAK,EACnD,CAACxC,GAAa4U,EAAc,EAAIpS,WAAkB,EAAK,EACvD,CAAC1E,GAAO2N,EAAQ,EAAIjJ,EAAkB,WAEtC,CAAC8J,GAAgBuI,EAAiB,EAAIrS,EAAiB,WACvD,CAACsS,EAAwBC,CAAyB,EAAIvS,WAAwC,MAAS,EAEvG,CAACwS,GAAgBC,EAAiB,EAAIzS,WAAiB,CAAC,EACxD,CAAC8L,EAAS4G,EAAU,EAAI1S,EAAA,SAAsD,CAAE,GAChF,CAAC2S,GAAiBC,EAAkB,EAAI5S,EAAA,SAAsD,CAAE,GAChG,CAAC6S,GAAYC,EAAa,EAAI9S,EAAA,SAA4B,CAAE,GAElBA,WAAkB,EAAK,EACPA,WAAkB,EAAK,EACvBA,WAAkB,EAAK,EACrBA,WAAkB,EAAK,EACzCA,WAAkB,EAAK,EAC3BA,WAAkB,EAAK,EACfA,WAAkB,EAAK,EAC7BA,WAAkB,EAAK,EACrE,KAAM,CAACsB,GAAyByR,EAA0B,EAAI/S,WAAkB,EAAK,EAC/E,CAACqB,GAAuB2R,EAAwB,EAAIhT,WAAkB,EAAK,EAC3E,CAACiT,GAAwBC,EAAyB,EAAIlT,WAAkB,EAAK,EAC7E,CAACmT,GAAuBC,EAAwB,EAAIpT,WAAkB,EAAK,EACbA,WAAkB,EAAK,EAC3F,KAAM,CAACqT,GAAqBC,EAAsB,EAAItT,WAAkB,EAAK,EAEvEuT,GAAQvR,EAAA,OAAO,IAAI,KAAO,EAAE,QAC5B,CAAClC,GAAWC,EAAY,EAAIC,WAAS,EAAK,EAE1CK,GAA6B,CAC/B,WAAAwS,GACA,cAAAC,GACA,MAAAS,GACA,UAAAzT,GACA,aAAAC,EAAA,EAG0CC,WAAkB,EAAK,EAE/D,MAAE,SAAAwT,IAAalJ,KACfmJ,GAAkBrO,aAAW4J,EAAe,EACzByE,IAAiB,MAAM,iBAAmBA,GAAgB,MAAM,qBAAqB,SAC9G,MAAMC,GAAuBD,IAAiB,MAAM,qBAAqB,UAAYA,IAAiB,MAAM,mBACxFA,IAAiB,MAAM,kBAAkB,iBAICzT,EAAA,SAAkCiP,GAAwB,OAAO,EACzFjP,WAAgC,IAAI,EACtBA,WAAkB,EAAK,EAG3E,KAAM,CAAC2T,GAAqBC,EAAsB,EAAI5T,WAAkB,EAAI,EAEtE,CAAC6T,EAAkBC,EAAmB,EAAI9T,WAAsE,IAAI,EACpH,CAAC+T,EAAmBC,EAAoB,EAAIhU,WAAwB,IAAI,EAuCxEiU,GAAqB,MAAOhP,EAAkB6G,EAAsCoI,IAAsC,CAC5H,IAAI3W,GAAiB,GACjB4W,EAA+B,GAE7B,MAAAC,EAAeC,GACV,IAAI,QAAmBC,IAAA,CAC1B,WAAW,IAAM,CACH/W,IAAA8W,EACV,MAAME,GAAkC,CACpC,GAAGJ,EACH,QAAS,CAAE,QAAS5W,GAAQ,KAAM4W,EAAY,QAAQ,IAAK,GAE/DvB,GAAmB,CAAC,GAAG9G,EAAS,CAAC7G,EAAUsP,EAAc,CAAC,CAAC,EAC3DD,GAAQ,IAAI,GACb,EAAE,EACR,EAED,IACAlC,GAAe,EAAI,EACF,gBAAApO,KAASwQ,GAAiBN,CAAY,EACnD,GAAIlQ,EAAM,SAAcA,EAAM,QAAW,YAC/BA,EAAA,QAAaA,EAAM,MACXmQ,EAAAnQ,UACPA,EAAM,OAAYA,EAAM,MAAS,QACxCzD,GAAa,EAAK,EAClB,MAAM6T,EAAYpQ,EAAM,MAAS,OAAU,UACpCA,EAAM,QAEDmQ,EAAA,QAAU,CAAE,GAAGA,EAAY,QAAS,GAAGnQ,EAAM,iBAClDA,EAAM,MACP,YAAMA,EAAM,KAAQ,CAElC,QACF,CACEoO,GAAe,EAAK,CACxB,CAKO,MAJ+B,CAClC,GAAG+B,EACH,QAAS,CAAE,QAAS5W,GAAQ,KAAM4W,EAAY,QAAQ,IAAK,EAExD,EAGL/Y,EAASnB,GAAWuZ,GAAW,OAChBpO,aAAWb,EAAY,EAE5C,MAAMkQ,GACExa,IAAYkZ,GAA8BvH,EAAuB,SACjEqH,GAA+BrH,EAAuB,UACnDA,EAAuB,KAE5BqB,GAAiBN,GAAkB8H,EAAe,EAElDC,GAAiB,MAAOzP,GAAqB,CAC/CgN,EAAgB,QAAUhN,EAE1B3J,IAAS2N,GAAS,MAAS,EAC3B1I,GAAa,EAAI,EACjB8R,GAAkB,MAAS,EAC3BE,EAA0B,MAAS,EACnCqB,GAAuB,EAAK,EAE5B,MAAM3Y,EAAQG,EAAS,MAAMC,EAASD,CAAM,EAAI,OAE5C,IAMA,MAAMQ,GAA0B,CAC5B,SAAU,CAAC,GANqBkQ,EAAQ,QAAa6I,GAAA,CACrD,CAAE,QAASA,EAAE,CAAC,EAAG,KAAM,MAAO,EAC9B,CAAE,QAASA,EAAE,CAAC,EAAE,QAAQ,QAAS,KAAM,WAAY,EACtD,EAG2B,CAAE,QAAS1P,EAAU,KAAM,OAAQ,EAC3D,QAAS,CACL,UAAW,CACP,gBAAiBuK,EAAe,SAAW,EAAI,OAAYA,EAC3D,iBAAkB0B,GAAgB,SAAW,EAAI,OAAYA,GAC7D,iBAAkBE,GAAgB,SAAW,EAAI,OAAYA,GAC7D,IAAKlB,EACL,eAAgBE,EAChB,uBAAwBE,EACxB,YAAAZ,EACA,uBAAwBI,EACxB,qBAAsBE,EACtB,eAAgBQ,EAChB,gBAAiBE,GACjB,kBAAmBM,GACnB,gBAAiBJ,EACjB,iBAAkBhJ,GAClB,2BAA4B0J,GAC5B,wBAAyBI,GACzB,2BAA4BE,GAC5B,cAAeJ,GACf,UAAWhL,GACX,YAAasL,GACb,SAAUnS,GAAK,SACf,sBAAuB0T,GACvB,GAAIzD,IAAS,KAAO,CAAE,KAAAA,GAAe,CAAC,CAC1C,CACJ,EAEA,cAAe9D,EAAQ,OAASA,EAAQA,EAAQ,OAAS,CAAC,EAAE,CAAC,EAAE,cAAgB,MAG7E/R,EAAW,MAAMgC,GAAQH,GAASI,GAAcf,CAAK,EACvD,IAAClB,EAAS,KACV,MAAM,MAAM,kBAAkB,EAElC,GAAIA,EAAS,OAAS,KAAO,CAACA,EAAS,GACnC,MAAM,MAAM,8BAA8BA,EAAS,MAAM,EAAE,EAE/D,GAAIiC,GAAc,CACd,MAAMF,EAAkC,MAAMmY,GAAmBhP,EAAU6G,EAAS/R,EAAS,IAAI,EAMjG,GALA2Y,GAAmBkC,GAAA,CACf,MAAMC,EAA0C,CAAC,GAAGD,EAAM,CAAC3P,EAAUnJ,CAAc,CAAC,EAC/D,OAAAkY,GAAAa,EAAW,OAAS,CAAC,EACnCA,CAAA,CACV,EACG,OAAO/Y,EAAe,eAAkB,UAAYA,EAAe,gBAAkB,GAAI,CACzF,MAAMb,EAAQG,EAAS,MAAMC,EAASD,CAAM,EAAI,OACjC6R,GAAA,QAAQnR,EAAe,cAAe,CAAC,GAAGgQ,EAAS,CAAC7G,EAAUnJ,CAAc,CAAC,EAAGb,CAAK,CACxG,MACG,CACG,MAAAa,EAAyC,MAAM/B,EAAS,OAC9D,GAAI+B,EAAe,MACT,YAAMA,EAAe,KAAK,EAOpC,GALA4W,GAAmBkC,GAAA,CACf,MAAMC,EAA0C,CAAC,GAAGD,EAAM,CAAC3P,EAAUnJ,CAAiC,CAAC,EAClF,OAAAkY,GAAAa,EAAW,OAAS,CAAC,EACnCA,CAAA,CACV,EACG,OAAO/Y,EAAe,eAAkB,UAAYA,EAAe,gBAAkB,GAAI,CACzF,MAAMb,EAAQG,EAAS,MAAMC,EAASD,CAAM,EAAI,OACjC6R,GAAA,QAAQnR,EAAe,cAAe,CAAC,GAAGgQ,EAAS,CAAC7G,EAAUnJ,CAAiC,CAAC,EAAGb,CAAK,CAC3H,CACJ,CACA6X,GAAc,CAAC,GAAGD,GAAY,IAAI,CAAC,QAC9B/P,EAAG,CACRmG,GAASnG,CAAC,SACZ,CACEvC,GAAa,EAAK,CACtB,GAGEuU,GAAY,IAAM,CACpB7C,EAAgB,QAAU,GAC1B3W,IAAS2N,GAAS,MAAS,EAC3BoJ,GAAkB,MAAS,EAC3BE,EAA0B,MAAS,EACnCG,GAAW,CAAE,GACbI,GAAc,CAAE,GAChBF,GAAmB,CAAE,GACrBrS,GAAa,EAAK,EAClB6R,GAAe,EAAK,EACpBwB,GAAuB,EAAI,GA4EzBrN,GAAoBwO,GAAoB,CAC1CL,GAAeK,CAAO,GAGpBC,GAAiB,CAAC1Y,EAAkByB,IAAkB,CACxDsU,GAAkB/V,CAAQ,EAC1BiW,EAA0B9K,EAAkB,oBAAoB,EAChEgL,GAAkB1U,CAAK,GAGrBkX,EAAc,CAACC,EAAwBnX,IAAkB,CAEvDwU,EADAD,IAA2B4C,GAAO1C,KAAmBzU,EAC3B,OAEAmX,CAFS,EAKvCzC,GAAkB1U,CAAK,GAGrB,CAAE,EAAA2C,GAAG,KAAAf,EAAK,EAAIC,EAAe,EAEnCuC,mBAAU,IAAM,CACZ,GAAI4R,IAAsB,MAAQ5B,GAAW,QAAQ4B,CAAiB,EAAG,CAC/D,MAAA3R,EAAK+P,GAAW,QAAQ4B,CAAiB,EAC/C,GAAI3R,EAAI,CACJ,MAAMC,EAAYD,EAAG,UAAU,MAAM;AAAA,CAAI,EAAE,QACvCA,EAAG,aAAe,KAAOC,EAAY,IACrCyR,GAAoB,CAAE,OAAQhI,EAAQiI,CAAiB,EAAG,MAAOA,EAAmB,CAE5F,CACAC,GAAqB,IAAI,CAC7B,GACD,CAACD,EAAmBjI,CAAO,CAAC,EAG1BjL,OAAA,OAAI,UAAW6B,EAAO,cAEnB,UAACvE,MAAA,OAAI,UAAWuE,EAAO,WACnB,gBAAC,MAAI,WAAWA,EAAO,eACnB,UAAAvE,EAAA,IAAC0Q,GAAe,SAAS,IAAMQ,EAAqB,EAAI,EAAG,QAC1DV,GAAc,SAAS,IAAMY,EAAsB,EAAI,EAAG,EAC3DpR,MAAC4Q,IAAgB,QAAS+F,GAAW,SAAU,CAAC7C,EAAgB,SAAW3R,GAAW,GAC1F,CACJ,GAGCO,EAAA,YAAI,UAAW6B,EAAO,kBAElB,UAAQoJ,EAAA,SAAW,GAChB3N,EAAA,IAAC,MAAI,WAAWuE,EAAO,gBACnB,SAACvE,EAAA,IAAAmI,GAAA,CAAY,iBAAAC,GAAoC,SAAAC,EAAoB,GACzE,SAIH,MAAI,WAAW9D,EAAO,sBAAuB,IAAKwP,GAC9C,UACG1U,IAAAmV,GAAgB,IAAI,CAACwC,EAAgBpX,IAChC8C,OAAA,OAAgB,UAAW6B,EAAO,aAC/B,UAAAvE,EAAA,IAACwI,GAAgB,SAASwO,EAAe,CAAC,CAAG,GAC5ChX,EAAA,WAAI,UAAWuE,EAAO,eACnB,SAAAvE,EAAA,IAAC4C,GAAA,CACG,YAAa,GAEb,OAAQoU,EAAe,CAAC,EACxB,MAAApX,EACA,aAAAsC,GACA,WAAY,GACZ,kBAAmBgH,GAAK2N,GAAe3N,EAAGtJ,CAAK,EAC/C,wBAAyB,IAAMkX,EAAYxN,EAAkB,kBAAmB1J,CAAK,EACrF,2BAA4B,IAAMkX,EAAYxN,EAAkB,qBAAsB1J,CAAK,EAC3F,0BAAgC0K,GAAAiM,GAAejM,CAAC,EAChD,sBAAuB6I,IAA+BxF,EAAQ,OAAS,IAAM/N,EAC7E,sBAAAsD,GACA,wBAAAC,EAAA,EAXKvD,CAAA,EAab,IAlBMA,CAmBV,CACH,EACJ,CAACP,IACEsO,EAAQ,IAAI,CAACvO,EAAQQ,IAChB8C,OAAA,OAAgB,UAAW6B,EAAO,aAC/B,UAAAvE,EAAA,IAACwI,GAAgB,SAASpJ,EAAO,CAAC,CAAG,GACpCY,EAAA,WAAI,UAAWuE,EAAO,eACnB,SAAAvE,MAAC,MAAI,KAAYiE,GAAA+P,GAAW,QAAQpU,CAAK,EAAIqE,EACzC,SAAAjE,EAAA,IAAC4C,GAAA,CACG,YAAa,GAEb,OAAQxD,EAAO,CAAC,EAChB,MAAAQ,EACA,aAAAsC,GACA,WAAYmS,KAAmBzU,GAASuU,IAA2B,OACnE,kBAAmBjL,GAAK2N,GAAe3N,EAAGtJ,CAAK,EAC/C,wBAAyB,IAAMkX,EAAYxN,EAAkB,kBAAmB1J,CAAK,EACrF,2BAA4B,IAAMkX,EAAYxN,EAAkB,qBAAsB1J,CAAK,EAC3F,0BAAgC0K,GAAAiM,GAAejM,CAAC,EAChD,sBAAuB6I,IAA+BxF,EAAQ,OAAS,IAAM/N,EAC7E,sBAAAsD,GACA,wBAAAC,EAAA,EAXKvD,GAab,CACJ,KApBMA,CAqBV,CACH,EACJuC,IACGO,EAAA,KAAC,MAAI,WAAW6B,EAAO,aACnB,UAACvE,MAAAwI,GAAA,CAAgB,QAASsL,EAAgB,OAAS,SAClD,MAAI,WAAWvP,EAAO,uBACnB,SAAAvE,MAAC6E,IAAc,GACnB,GACJ,EAEH1H,GACGuF,EAAA,KAAC,MAAI,WAAW6B,EAAO,aACnB,UAACvE,MAAAwI,GAAA,CAAgB,QAASsL,EAAgB,OAAS,SAClD,MAAI,WAAWvP,EAAO,uBACnB,eAACU,GAAY,OAAO9H,GAAM,WAAY,QAAS,IAAMoZ,GAAezC,EAAgB,OAAO,CAAG,GAClG,GACJ,EACA,MACR,EAGC9T,EAAA,WAAI,UAAWuE,EAAO,aACnB,SAAAvE,EAAA,IAACuG,GAAA,CACG,YAAW,GACX,YAAY,gEACZ,SAAUpE,GACV,OAAoB2E,GAAAyP,GAAezP,CAAQ,EAC3C,gBAAiB,KAEzB,GACJ,EAGA9G,EAAA,IAACyP,GAAA,CACG,WAAW,8BACX,OAAQwB,EACR,WAAY,GACZ,UAAW,IAAMC,EAAqB,EAAK,EAC3C,qBAAqB,QACrB,sBAAuB,IAAOlR,MAAAwN,GAAA,CAAc,QAAS,IAAM0D,EAAqB,EAAK,EAAG,SAAK,UAC7F,iBAAkB,GAElB,gBAAC,MAAI,OAAO,CAAE,QAAS,MACnB,YAAAlR,MAAC,KAAE,SAA8D,0EAChEsE,EAAM,QAAQ,CAAE,YAAa,EAC1B,YAAAtE,EAAA,IAAC8H,GAAA,CACG,MAAM,cACN,MAAOyJ,EAAY,SAAS,EAC5B,SAAU,CAACjL,EAAGqB,IAAa6J,EAAe,WAAW7J,GAAY,KAAK,CAAC,EAC3E,EACA3H,EAAA,IAAC8H,GAAA,CACG,MAAM,iBACN,MAAOiK,EAAc,SAAS,EAC9B,SAAU,CAACzL,EAAGqB,IAAaqK,EAAiB,SAASrK,GAAY,GAAG,CAAC,EACzE,GACJ,GACJ,EACJ,EAEC4N,IACGvV,EAAA,IAAC2O,GAAA,CACG,SAAUlB,EAAuB,SACjC,OAAQ0D,EACR,OAAQ,GACR,QAAS,IAAMC,EAAsB,EAAK,EAC1C,eAAgBzD,GAAW,CACvB4G,GAAW5G,CAAO,EAClByD,EAAsB,EAAK,CAC/B,EACJ,EAIHzD,EAAQ,OAAS,GAAKwG,GACnBnU,EAAA,IAACyP,GAAA,CACG,WAAW,WACX,OAAQ0E,IAA2B,OACnC,WAAY,GACZ,UAAW,IAAMC,EAA0B,MAAS,EACpD,qBAAqB,QACrB,sBAAuB,IAAOpU,MAAAwN,GAAA,CAAc,QAAS,IAAM4G,EAA0B,MAAS,EAAG,SAAK,UACtG,iBAAkB,GAElB,SAAApU,EAAA,IAACyL,GAAA,CACG,UAAWlH,EAAO,cAClB,eAAAoH,GACA,mBAAoB/G,GAAKkS,EAAYlS,EAAGyP,EAAc,EACtD,eAAe,QACf,OAAQ1G,EAAQ0G,EAAc,EAAE,CAAC,EACjC,UAAWF,CAAA,CACf,EACJ,EAGHuB,GACG1V,EAAA,IAAC+Q,GAAA,CACG,OAEQrO,EAAA,KAAAC,WAAA,WAAA3C,EAAA,IAACwI,GAAgB,SAASkN,EAAiB,OAAO,CAAC,EAAG,EACrD1V,EAAA,WAAI,UAAWuE,EAAO,eACnB,SAAAvE,EAAA,IAAC4C,GAAA,CACG,YAAa,GAEb,OAAQ8S,EAAiB,OAAO,CAAC,EACjC,MAAOA,EAAiB,MACxB,aAAAxT,GACA,WAAYmS,KAAmBqB,EAAiB,OAASvB,IAA2B,OACpF,kBAAmBjL,GAAK2N,GAAe3N,EAAGwM,EAAiB,KAAK,EAChE,wBAAyB,IAAMoB,EAAYxN,EAAkB,kBAAmBoM,EAAiB,KAAK,EACtG,2BAA4B,IAAMoB,EAAYxN,EAAkB,qBAAsBoM,EAAiB,KAAK,EAC5G,0BAAgCpL,GAAAiM,GAAejM,CAAC,EAChD,sBAAuB6I,IAA+BxF,EAAQ,OAAS,IAAM+H,EAAiB,MAC9F,sBAAAxS,GACA,wBAAAC,EAAA,EAXKuS,EAAiB,OAa9B,GACJ,EAEJ,QAAS,IAAMC,GAAoB,IAAI,EAC3C,CAER,GAER,EC1mBMsB,GAAS,IAAM,CACHxV,EAAe,EAC7B,KAAM,CAACyV,EAAUC,CAAW,EAAItV,WAAS,EAAK,EACxCuV,EAAqCvT,SAAO,IAAI,EAChD,CAACwT,EAAkBC,CAAmB,EAAIzV,WAAS,EAAK,EAMxD0V,EAAsB1R,GAAsB,CAC1CuR,EAAQ,SAAW,CAACA,EAAQ,QAAQ,SAASvR,EAAM,MAAc,GACjEsR,EAAY,EAAK,CACrB,EAGJnT,YAAU,KACFkT,EACS,0BAAiB,YAAaK,CAAkB,EAEhD,6BAAoB,YAAaA,CAAkB,EAEzD,IAAM,CACA,6BAAoB,YAAaA,CAAkB,IAEjE,CAACL,CAAQ,CAAC,EAEb,MAAMM,EAAW,CACb,CAAE,GAAI,IAAK,KAAMC,GAAU,MAAO,MAAO,EACzC,CAAE,GAAI,MAAO,KAAMC,GAAc,MAAO,iBAAkB,EAC1D,CAAE,GAAI,QAAS,KAAMC,GAAU,MAAO,aAAc,GAIpD,OAAAjV,EAAA,KAAC,MAAI,WAAU,+EACX,UAAA1C,EAAA,IAAC4X,GAAA,CACG,SAAS,YACT,aAAc,CACV,SAAU,IACV,MAAO,CACH,WAAY,OACZ,MAAO,UACP,OAAQ,oBACR,aAAc,OACd,UAAW,gCACf,EACA,QAAS,CACL,UAAW,CACP,QAAS,UACT,UAAW,MACf,CACJ,EACA,MAAO,CACH,UAAW,CACP,QAAS,UACT,UAAW,MACf,CACJ,CACJ,EACJ,QAGC,SAAO,WAAU,gBACd,SAAClV,EAAA,YAAI,UAAU,oEACX,UAAA1C,MAAC,OAAI,UAAU,yCACX,SAAC0C,EAAA,YAAI,UAAU,yCAEX,UAAC1C,MAAA6X,GAAO,IAAP,CAAW,QAAS,CAAE,QAAS,EAAG,EAAG,GAAI,EAAG,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAAG,UAAU,8BAClF,gBAACtM,GAAK,IAAG,IAAI,UAAU,oCACnB,UAACvL,MAAA,OAAI,UAAU,mMAEX,SAAAA,EAAA,IAAC6X,GAAO,IAAP,CACG,QAAS,CAAE,EAAG,CAAC,EAAG,IAAK,CAAC,CAAE,EAC1B,WAAY,CAAE,SAAU,IAAK,OAAQ,IAAU,KAAM,WAAY,EACjE,UAAU,8CACb,gBAGL,EACA7X,MAAC,MAAI,WAAU,oJAAqJ,UACnK,MACG,WAACA,EAAA,UAAG,UAAU,mGAAmG,SAEjH,wBACCA,EAAA,SAAE,UAAU,yCAAyC,SAAuB,6BACjF,GACJ,CACJ,GAGAA,MAAC6X,GAAO,IAAP,CAAW,QAAS,CAAE,QAAS,EAAG,EAAG,KAAO,QAAS,CAAE,QAAS,EAAG,EAAG,CAAK,YAAU,wCACjF,SAASL,EAAA,IAAI,CAAC3a,EAAM+C,IACjBI,EAAA,IAAC6X,GAAO,IAAP,CAEG,QAAS,CAAE,QAAS,EAAG,EAAG,GAAI,EAC9B,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAC5B,WAAY,CAAE,MAAOjY,EAAQ,EAAI,EAEjC,SAAA8C,EAAA,KAACoV,GAAA,CACG,GAAIjb,EAAK,GACT,UAAW,CAAC,CAAE,SAAAkb,KACV,4FACIA,EACM,sCACA,6DACV,GAGJ,UAAA/X,MAACnD,EAAK,KAAL,CAAU,UAAU,SAAU,GAC/BmD,MAAC,OAAM,UAAAnD,EAAK,KAAM,IACtB,GAjBKA,EAAK,EAmBjB,GACL,SAGCgb,GAAO,IAAP,CAAW,QAAS,CAAE,QAAS,EAAG,EAAG,IAAM,QAAS,CAAE,QAAS,EAAG,EAAG,CAAE,EAAG,UAAU,8BAEjF,UAACnV,OAAA,UAAO,UAAU,2HACd,UAAC1C,MAAAgY,GAAA,CAAc,UAAU,SAAU,GAClChY,EAAA,YAAK,UAAU,cAAc,SAAQ,cAC1C,EAGA0C,EAAA,KAAC,KACG,KAAK,4DACL,OAAO,SACP,IAAI,sBACJ,UAAU,2MAEV,UAAA1C,MAAC,OAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,YACjD,SAAAA,EAAA,IAAC,QACG,SAAS,UACT,EAAE,mtBACF,SAAS,YAEjB,EACCA,EAAA,YAAK,UAAU,8BAA8B,SAAc,oBAChE,EAGAA,EAAA,IAAC,UACG,QAAS,IAAMsX,EAAoB,CAACD,CAAgB,EACpD,UAAU,yFAET,SAAAA,QAAoBY,GAAU,WAAU,UAAU,EAAKjY,EAAA,IAACkY,GAAU,WAAU,SAAU,GAC3F,GACJ,GACJ,CACJ,GAGAlY,EAAA,IAAC6X,GAAO,IAAP,CACG,QAAS,GACT,QAAS,CACL,OAAQR,EAAmB,OAAS,EACpC,QAASA,EAAmB,EAAI,CACpC,EACA,WAAY,CAAE,SAAU,EAAI,EAC5B,UAAU,uFAEV,SAAA3U,EAAA,KAAC,MAAI,WAAU,sBACV,UAAA8U,EAAS,IACN3a,GAAA6F,EAAA,KAACoV,GAAA,CAEG,GAAIjb,EAAK,GACT,QAAS,IAAMya,EAAoB,EAAK,EACxC,UAAW,CAAC,CAAE,SAAAS,KACV,4FACIA,EAAW,4BAA8B,+DAC7C,GAGJ,UAAA/X,MAACnD,EAAK,KAAL,CAAU,UAAU,SAAU,GAC/BmD,MAAC,OAAM,UAAAnD,EAAK,KAAM,KAVbA,EAAK,GAYjB,QACA,MAAI,WAAU,0CACX,SAAC6F,EAAA,eAAO,UAAU,8JACd,UAAC1C,MAAAgY,GAAA,CAAc,UAAU,SAAU,GAClChY,EAAA,YAAK,UAAU,cAAc,SAAQ,cAC1C,CACJ,IACJ,EACJ,GACJ,CACJ,SAGC,OAAK,WAAU,0BACZ,SAAAA,MAACmY,IAAO,GACZ,QAGC,SAAO,WAAU,4EACd,SAACzV,EAAA,YAAI,UAAU,+CACX,UAACA,OAAA,OAAI,UAAU,wCAEX,UAACA,OAAA,OAAI,UAAU,2BACX,UAACA,OAAA,OAAI,UAAU,mCACX,UAAC1C,MAAA,OAAI,UAAU,wGACX,SAAAA,EAAA,IAAC,QAAK,UAAU,UAAU,cAAE,CAChC,GACCA,EAAA,UAAG,UAAU,uCAAuC,SAAmB,yBAC5E,EACCA,EAAA,SAAE,UAAU,mCAAmC,SAEhD,mIACA0C,OAAC,MAAI,WAAU,iBACX,UAAC1C,EAAA,YAAK,UAAU,sGAAsG,SAEtH,kBACCA,EAAA,YAAK,UAAU,sGAAsG,SAEtH,mBACJ,GACJ,SAGC,MACG,WAACA,EAAA,UAAG,UAAU,wCAAwC,SAAW,gBACjE0C,OAAC,MAAI,WAAU,YACX,UAAA1C,MAACuL,GAAK,IAAG,IAAI,UAAU,iFAAiF,SAExG,eACCA,GAAK,IAAG,MAAM,UAAU,iFAAiF,SAE1G,0BACCA,GAAK,IAAG,QAAQ,UAAU,iFAAiF,SAE5G,iBACJ,GACJ,SAGC,MACG,WAACvL,EAAA,UAAG,UAAU,wCAAwC,SAAS,cAC/D0C,OAAC,MAAI,WAAU,YACX,UAAA1C,MAAC,IAAE,MAAK,IAAI,UAAU,iFAAiF,SAEvG,sBACC,IAAE,MAAK,IAAI,UAAU,iFAAiF,SAEvG,0BACC,IAAE,MAAK,IAAI,UAAU,iFAAiF,SAEvG,qBACAA,EAAA,IAAC,KACG,KAAK,4DACL,OAAO,SACP,IAAI,sBACJ,UAAU,iFACb,6BAED,GACJ,GACJ,GACJ,EAEA0C,OAAC,MAAI,WAAU,kGACX,UAAC1C,EAAA,SAAE,UAAU,6BAA6B,SAA+E,oFACzH0C,OAAC,MAAI,WAAU,2CACX,UAAC1C,EAAA,YAAK,UAAU,6BAA6B,SAAW,gBACxD0C,OAAC,MAAI,WAAU,8BACX,UAAC1C,EAAA,YAAK,UAAU,uCAAuC,SAAY,iBAClEA,EAAA,YAAK,UAAU,sCAAsC,SAAK,UAC1DA,EAAA,YAAK,UAAU,uCAAuC,SAAU,gBACrE,GACJ,GACJ,GACJ,CACJ,EACJ,GAER,EC3RMoY,GAAgB,IAAM,CACxB,KAAM,CAACpR,EAAUqR,CAAW,EAAIxW,WAAS,EAAK,EAC9C,GAAI/F,GAAU,CACN,IAAAwc,EAAe,IAAIC,GAAwBrc,EAAU,EAGrD,OAACoc,EAAa,iBAAiB,GAAKA,EAAa,eAAe,EAAE,OAAS,GAE9DA,EAAA,iBAAiBA,EAAa,iBAAkB,GAIjEA,EAAa,iBAA0BzS,GAAA,CACnC,GAAIA,EAAM,YAAc2S,GAAU,eAAiB3S,EAAM,QAAS,CAC9D,MAAM4S,EAAU5S,EAAM,QACtByS,EAAa,iBAAiBG,CAAO,CACzC,EACH,EAEDzU,YAAU,IAAM,EACU,SAAY,CAClBqU,EAAA,MAAMrb,GAAcsb,CAAY,CAAC,KAIrD,EAAG,CAAE,GAGDtY,MAAC0Y,GAAa,UAAUJ,EACpB,SAAAtY,EAAA,IAACoG,GAAa,SAAb,CACG,MAAO,CACH,SAAAY,EACA,YAAAqR,CACJ,EAEA,eAAC,MAAI,WAAU,6BACX,SAAArY,MAACiX,IAAO,GACZ,EAER,QAIA,QAAAjX,EAAA,IAACoG,GAAa,SAAb,CACG,MAAO,CACH,SAAAY,EACA,YAAAqR,CACJ,EAEA,eAAC,MAAI,WAAU,6BACX,SAAArY,MAACiX,IAAO,GACZ,GAIhB,ECjDA0B,KAEA,MAAMC,GAASC,GAAiB,CAC5B,CACI,KAAM,IACN,cAAUT,GAAc,IACxB,SAAU,CACN,CACI,MAAO,GACP,cAAUpH,GAAK,GACnB,EACA,CACI,KAAM,KACN,KAAM,IAAM8H,GAAA,WAAO,mBAAiB,+BACxC,EACA,CACI,KAAM,IACN,KAAM,IAAMA,GAAA,WAAO,sBAAgB,yBACvC,CACJ,CACJ,CACJ,CAAC,EAEDC,GAAS,WAAW,SAAS,eAAe,MAAM,CAAgB,EAAE,OAC/D/Y,MAAAgZ,GAAM,WAAN,CACG,eAACC,GAAgB,MAAM7Y,GACnB,SAAAJ,EAAA,IAACkZ,IACG,SAAClZ,MAAAmZ,GAAA,CAAe,OAAAP,GAAgB,EACpC,CACJ,GACJ,CACJ","names":["appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","checkLoggedIn","client","getToken","error","BACKEND_URI","getHeaders","idToken","configApi","askApi","request","headers","parsedResponse","chatApi","shouldStream","url","getSpeechApi","text","blob","getCitationFilePath","citation","postChatHistoryApi","getChatHistoryListApi","count","continuationToken","getChatHistoryApi","id","deleteChatHistoryApi","RetrievalMode","GPT4VInput","VectorFields","isCitationValid","contextDataPoints","citationCandidate","dataPointsArray","dataPoint","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","jsx","AnswerIcon","Sparkle28Filled","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","daTranslation","enTranslation","esTranslation","frTranslation","jaTranslation","nlTranslation","ptBRTranslation","trTranslation","itTranslation","SpeechSynthesis","synth","getUtterance","lngCode","utterance","voice","SpeechOutputBrowser","i18n","useTranslation","currentLng","isPlaying","setIsPlaying","useState","startOrStopSpeech","color","IconButton","SpeechOutputAzure","speechConfig","isLoading","setIsLoading","localPlayingState","setLocalPlayingState","t","playAudio","speechUrl","jsxs","Fragment","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","followupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","copied","setCopied","expanded","setExpanded","answerTextRef","useRef","isLong","setIsLong","useEffect","el","lineCount","handleCopy","textToCopy","err","Stack","styles","ReactMarkdown","rehypeRaw","remarkGfm","e","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","useCustomSpeechRecognition","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Tooltip","Button","Mic28Filled","LoginContext","createContext","_","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","showSpeechInput","question","setQuestion","loggedIn","useContext","isComposing","setIsComposing","sendQuestion","onEnterPress","ev","handleCompositionStart","handleCompositionEnd","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Send28Filled","Example","value","onClick","ExampleList","onExampleClicked","useGPT4V","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","UserChatMessage","message","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","TokenUsageGraph","tokenUsage","reasoningEffort","prompt_tokens","completion_tokens","reasoning_tokens","total_tokens","calcPercent","SyntaxHighlighter","AgentPlan","query_plan","description","planning","step","queries","q","ThoughtProcess","thoughts","k","a11yLight","MarkdownViewer","src","setContent","setError","removeAnchorLinks","markdown","ancorLinksRegex","markdownText","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","useMsal","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","HistoryItem","onSelect","onDelete","isModalOpen","setIsModalOpen","handleDelete","useCallback","Delete24Regular","DeleteHistoryModal","isOpen","onClose","onConfirm","DefaultButton","HistoryProviderOptions","NoneProvider","answers","IndexedDBProvider","dbName","storeName","openDB","db","cursor","loadedItems","timestamp","tx","current","CosmosDBProvider","session","useHistoryManager","provider","HISTORY_COUNT_PER_LOAD","HistoryPanel","notify","onChatSelected","historyManager","history","setHistory","hasMoreHistory","setHasMoreHistory","loadMoreHistory","items","prevHistory","handleSelect","groupedHistory","groupHistory","Panel","PanelType","group","InfiniteLoadingButton","today","yesterday","lastWeek","lastMonth","groups","itemDate","func","buttonRef","observer","entries","entry","HistoryButton","History24Regular","SettingsButton","Settings24Regular","ClearChatButton","AppStateContext","ChatHistoryLoadingState","FullScreenAnswer","Chat","isConfigPanelOpen","setIsConfigPanelOpen","isHistoryPanelOpen","setIsHistoryPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrieveCount","setRetrieveCount","maxSubqueryCount","setMaxSubqueryCount","resultsMergeStrategy","setResultsMergeStrategy","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","useQueryRewriting","setUseQueryRewriting","setReasoningEffort","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","includeCategory","setIncludeCategory","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFields","setVectorFields","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","setUseGPT4V","lastQuestionRef","chatContainerRef","answerRefs","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","setAnswers","streamedAnswers","setStreamedAnswers","speechUrls","setSpeechUrls","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","showChatHistoryBrowser","setShowChatHistoryBrowser","showChatHistoryCosmos","setShowChatHistoryCosmos","useAgenticRetrieval","setUseAgenticRetrieval","audio","instance","appStateContext","CHAT_HISTORY_ENABLED","showCareerDashboard","setShowCareerDashboard","fullScreenAnswer","setFullScreenAnswer","pendingCheckIndex","setPendingCheckIndex","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","historyProvider","makeApiRequest","a","prev","newAnswers","clearChat","example","onShowCitation","onToggleTab","tab","streamedAnswer","Layout","menuOpen","setMenuOpen","menuRef","isMobileMenuOpen","setIsMobileMenuOpen","handleClickOutside","navItems","HomeIcon","ChartBarIcon","UserIcon","Toaster","motion","NavLink","isActive","Cog6ToothIcon","XMarkIcon","Bars3Icon","Outlet","LayoutWrapper","setLoggedIn","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","I18nextProvider","HelmetProvider","RouterProvider"],"ignoreList":[],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/TokenUsageGraph.tsx","../../../frontend/src/components/AnalysisPanel/AgentPlan.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/HistoryItem/HistoryItem.tsx","../../../frontend/src/components/HistoryProviders/IProvider.ts","../../../frontend/src/components/HistoryProviders/None.ts","../../../frontend/src/components/HistoryProviders/IndexedDB.ts","../../../frontend/src/components/HistoryProviders/CosmosDB.ts","../../../frontend/src/components/HistoryProviders/HistoryManager.ts","../../../frontend/src/components/HistoryPanel/HistoryPanel.tsx","../../../frontend/src/components/HistoryButton/HistoryButton.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/state/AppProvider.tsx","../../../frontend/src/types/chat.ts","../../../frontend/src/components/FullScreenAnswer.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\n\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\n\nconst appServicesAuthTokenUrl = \".auth/me\";\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\n\ninterface AppServicesToken {\n    id_token: string;\n    access_token: string;\n    user_claims: Record<string, any>;\n    expires_on: string;\n}\n\ninterface AuthSetup {\n    // Set to true if login elements should be shown in the UI\n    useLogin: boolean;\n    // Set to true if access control is enforced by the application\n    requireAccessControl: boolean;\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\n    enableUnauthenticatedAccess: boolean;\n    /**\n     * Configuration object to be passed to MSAL instance on creation.\n     * For a full list of MSAL.js configuration parameters, visit:\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n     */\n    msalConfig: {\n        auth: {\n            clientId: string; // Client app id used for login\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\n        };\n        cache: {\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\n        };\n    };\n    loginRequest: {\n        /**\n         * Scopes you add here will be prompted for user consent during sign-in.\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n         * For more information about OIDC scopes, visit:\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n         */\n        scopes: Array<string>;\n    };\n    tokenRequest: {\n        scopes: Array<string>;\n    };\n}\n\n// Fetch the auth setup JSON data from the API if not already cached\nasync function fetchAuthSetup(): Promise<AuthSetup> {\n    const response = await fetch(\"/auth_setup\");\n    if (!response.ok) {\n        throw new Error(`auth setup response was not ok: ${response.status}`);\n    }\n    return await response.json();\n}\n\nconst authSetup = await fetchAuthSetup();\n\nexport const useLogin = authSetup.useLogin;\n\nexport const requireAccessControl = authSetup.requireAccessControl;\n\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\n\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = authSetup.msalConfig;\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\n */\nexport const loginRequest = authSetup.loginRequest;\n\nconst tokenRequest = authSetup.tokenRequest;\n\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\nexport const getRedirectUri = () => {\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\n};\n\n// Cache the app services token if it's available\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\ndeclare global {\n    var cachedAppServicesToken: AppServicesToken | null;\n}\nglobalThis.cachedAppServicesToken = null;\n\n/**\n * Retrieves an access token if the user is logged in using app services authentication.\n * Checks if the current token is expired and fetches a new token if necessary.\n * Returns null if the app doesn't support app services authentication.\n *\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\n */\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\n        const currentDate = new Date();\n        const expiresOnDate = new Date(appServicesToken.expires_on);\n        return expiresOnDate > currentDate;\n    };\n\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\n        return Promise.resolve(globalThis.cachedAppServicesToken);\n    }\n\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\n        return fetch(appServicesAuthTokenUrl).then(r => {\n            if (r.ok) {\n                return r.json().then(json => {\n                    if (json.length > 0) {\n                        return {\n                            id_token: json[0][\"id_token\"] as string,\n                            access_token: json[0][\"access_token\"] as string,\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\n                                acc[item.typ] = item.val;\n                                return acc;\n                            }, {}) as Record<string, any>,\n                            expires_on: json[0][\"expires_on\"] as string\n                        } as AppServicesToken;\n                    }\n\n                    return null;\n                });\n            }\n\n            return null;\n        });\n    };\n\n    return getAppServicesTokenFromMe().then(token => {\n        if (token) {\n            if (checkNotExpired(token)) {\n                globalThis.cachedAppServicesToken = token;\n                return token;\n            }\n\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\n                if (r.ok) {\n                    return getAppServicesTokenFromMe();\n                }\n                return null;\n            });\n        }\n\n        return null;\n    });\n};\n\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\n\n// Sign out of app services\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\nexport const appServicesLogout = () => {\n    window.location.href = appServicesAuthLogoutUrl;\n};\n\n/**\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\n */\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\n    if (client) {\n        const activeAccount = client.getActiveAccount();\n        if (activeAccount) {\n            return true;\n        }\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return true;\n    }\n\n    return false;\n};\n\n// Get an access token for use with the API server.\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\n// Use the access token from app services login if available\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return Promise.resolve(appServicesToken.access_token);\n    }\n\n    return client\n        .acquireTokenSilent({\n            ...tokenRequest,\n            redirectUri: getRedirectUri()\n        })\n        .then(r => r.accessToken)\n        .catch(error => {\n            console.log(error);\n            return undefined;\n        });\n};\n\n/**\n * Retrieves the username of the active account.\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\n */\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.username;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken?.user_claims) {\n        return appServicesToken.user_claims.preferred_username;\n    }\n\n    return null;\n};\n\n/**\n * Retrieves the token claims of the active account.\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\n */\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\n    const activeAccount = client.getActiveAccount();\n    if (activeAccount) {\n        return activeAccount.idTokenClaims;\n    }\n\n    const appServicesToken = await getAppServicesToken();\n    if (appServicesToken) {\n        return appServicesToken.user_claims;\n    }\n\n    return undefined;\n};\n","const BACKEND_URI = \"\";\n\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse, HistoryListApiResponse, HistoryApiResponse } from \"./models\";\nimport { useLogin, getToken, isUsingAppServicesLogin } from \"../authConfig\";\n\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\n    // If using login and not using app services, add the id token of the logged in account as the authorization\n    if (useLogin && !isUsingAppServicesLogin) {\n        if (idToken) {\n            return { Authorization: `Bearer ${idToken}` };\n        }\n    }\n\n    return {};\n}\n\nexport async function configApi(): Promise<Config> {\n    const response = await fetch(`${BACKEND_URI}/config`, {\n        method: \"GET\"\n    });\n\n    return (await response.json()) as Config;\n}\n\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`${BACKEND_URI}/ask`, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n\n    if (response.status > 299 || !response.ok) {\n        throw Error(`Request failed with status ${response.status}`);\n    }\n    const parsedResponse: ChatAppResponseOrError = await response.json();\n    if (parsedResponse.error) {\n        throw Error(parsedResponse.error);\n    }\n\n    return parsedResponse as ChatAppResponse;\n}\n\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\n    let url = `${BACKEND_URI}/chat`;\n    if (shouldStream) {\n        url += \"/stream\";\n    }\n    const headers = await getHeaders(idToken);\n    return await fetch(url, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(request)\n    });\n}\n\nexport async function getSpeechApi(text: string): Promise<string | null> {\n    return await fetch(\"/speech\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            text: text\n        })\n    })\n        .then(response => {\n            if (response.status == 200) {\n                return response.blob();\n            } else if (response.status == 400) {\n                console.log(\"Speech synthesis is not enabled.\");\n                return null;\n            } else {\n                console.error(\"Unable to get speech synthesis.\");\n                return null;\n            }\n        })\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `${BACKEND_URI}/content/${citation}`;\n}\n\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\n    const response = await fetch(\"/upload\", {\n        method: \"POST\",\n        headers: await getHeaders(idToken),\n        body: request\n    });\n\n    if (!response.ok) {\n        throw new Error(`Uploading files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteUploadedFileApi(filename: string, idToken: string): Promise<SimpleAPIResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/delete_uploaded\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ filename })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting file failed: ${response.statusText}`);\n    }\n\n    const dataResponse: SimpleAPIResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function listUploadedFilesApi(idToken: string): Promise<string[]> {\n    const response = await fetch(`/list_uploaded`, {\n        method: \"GET\",\n        headers: await getHeaders(idToken)\n    });\n\n    if (!response.ok) {\n        throw new Error(`Listing files failed: ${response.statusText}`);\n    }\n\n    const dataResponse: string[] = await response.json();\n    return dataResponse;\n}\n\nexport async function postChatHistoryApi(item: any, idToken: string): Promise<any> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(\"/chat_history\", {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(item)\n    });\n\n    if (!response.ok) {\n        throw new Error(`Posting chat history failed: ${response.statusText}`);\n    }\n\n    const dataResponse: any = await response.json();\n    return dataResponse;\n}\n\nexport async function getChatHistoryListApi(count: number, continuationToken: string | undefined, idToken: string): Promise<HistoryListApiResponse> {\n    const headers = await getHeaders(idToken);\n    let url = `${BACKEND_URI}/chat_history/sessions?count=${count}`;\n    if (continuationToken) {\n        url += `&continuationToken=${continuationToken}`;\n    }\n\n    const response = await fetch(url.toString(), {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat histories failed: ${response.statusText}`);\n    }\n\n    const dataResponse: HistoryListApiResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function getChatHistoryApi(id: string, idToken: string): Promise<HistoryApiResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chat_history/sessions/${id}`, {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat history failed: ${response.statusText}`);\n    }\n\n    const dataResponse: HistoryApiResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteChatHistoryApi(id: string, idToken: string): Promise<any> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chat_history/sessions/${id}`, {\n        method: \"DELETE\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting chat history failed: ${response.statusText}`);\n    }\n}\n","export const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport const enum GPT4VInput {\n    TextAndImages = \"textAndImages\",\n    Images = \"images\",\n    Texts = \"texts\"\n}\n\nexport const enum VectorFields {\n    Embedding = \"textEmbeddingOnly\",\n    ImageEmbedding = \"imageEmbeddingOnly\",\n    TextAndImageEmbeddings = \"textAndImageEmbeddings\"\n}\n\nexport type ChatAppRequestOverrides = {\n    retrieval_mode?: RetrievalMode;\n    semantic_ranker?: boolean;\n    semantic_captions?: boolean;\n    query_rewriting?: boolean;\n    reasoning_effort?: string;\n    include_category?: string;\n    exclude_category?: string;\n    seed?: number;\n    top?: number;\n    max_subqueries?: number;\n    results_merge_strategy?: string;\n    temperature?: number;\n    minimum_search_score?: number;\n    minimum_reranker_score?: number;\n    prompt_template?: string;\n    prompt_template_prefix?: string;\n    prompt_template_suffix?: string;\n    suggest_followup_questions?: boolean;\n    use_oid_security_filter?: boolean;\n    use_groups_security_filter?: boolean;\n    use_gpt4v?: boolean;\n    gpt4v_input?: GPT4VInput;\n    vector_fields: VectorFields;\n    language: string;\n    use_agentic_retrieval: boolean;\n};\n\nexport type ResponseMessage = {\n    content: string;\n    role: string;\n};\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: any };\n};\n\nexport type ResponseContext = {\n    data_points: string[];\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport type ChatAppResponseOrError = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n    error?: string;\n};\n\nexport type ChatAppResponse = {\n    message: ResponseMessage;\n    delta: ResponseMessage;\n    context: ResponseContext;\n    session_state: any;\n};\n\nexport type ChatAppRequestContext = {\n    overrides?: ChatAppRequestOverrides;\n};\n\nexport type ChatAppRequest = {\n    messages: ResponseMessage[];\n    context?: ChatAppRequestContext;\n    session_state: any;\n};\n\nexport type Config = {\n    defaultReasoningEffort: string;\n    showGPT4VOptions: boolean;\n    showSemanticRankerOption: boolean;\n    showQueryRewritingOption: boolean;\n    showReasoningEffortOption: boolean;\n    streamingEnabled: boolean;\n    showVectorOption: boolean;\n    showUserUpload: boolean;\n    showLanguagePicker: boolean;\n    showSpeechInput: boolean;\n    showSpeechOutputBrowser: boolean;\n    showSpeechOutputAzure: boolean;\n    showChatHistoryBrowser: boolean;\n    showChatHistoryCosmos: boolean;\n    showAgenticRetrievalOption: boolean;\n};\n\nexport type SimpleAPIResponse = {\n    message?: string;\n};\n\nexport interface SpeechConfig {\n    speechUrls: (string | null)[];\n    setSpeechUrls: (urls: (string | null)[]) => void;\n    audio: HTMLAudioElement;\n    isPlaying: boolean;\n    setIsPlaying: (isPlaying: boolean) => void;\n}\n\nexport type HistoryListApiResponse = {\n    sessions: {\n        id: string;\n        entra_oid: string;\n        title: string;\n        timestamp: number;\n    }[];\n    continuation_token?: string;\n};\n\nexport type HistoryApiResponse = {\n    id: string;\n    entra_oid: string;\n    answers: any;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\n// Function to validate citation format and check if dataPoint starts with possible citation\nfunction isCitationValid(contextDataPoints: any, citationCandidate: string): boolean {\n    const regex = /.+\\.\\w{1,}(?:#\\S*)?$/;\n    if (!regex.test(citationCandidate)) {\n        return false;\n    }\n\n    // Check if contextDataPoints is an object with a text property that is an array\n    let dataPointsArray: string[];\n    if (Array.isArray(contextDataPoints)) {\n        dataPointsArray = contextDataPoints;\n    } else if (contextDataPoints && Array.isArray(contextDataPoints.text)) {\n        dataPointsArray = contextDataPoints.text;\n    } else {\n        return false;\n    }\n\n    const isValidCitation = dataPointsArray.some(dataPoint => {\n        return dataPoint.startsWith(citationCandidate);\n    });\n\n    return isValidCitation;\n}\n\nexport function parseAnswerToHtml(answer: ChatAppResponse, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const contextDataPoints = answer.context.data_points;\n    const citations: string[] = [];\n\n    // Trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.message.content.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n\n            if (!isCitationValid(contextDataPoints, part)) {\n                return `[${part}]`;\n            }\n\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import i18next from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport HttpApi from \"i18next-http-backend\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport daTranslation from \"../locales/da/translation.json\";\nimport enTranslation from \"../locales/en/translation.json\";\nimport esTranslation from \"../locales/es/translation.json\";\nimport frTranslation from \"../locales/fr/translation.json\";\nimport jaTranslation from \"../locales/ja/translation.json\";\nimport nlTranslation from \"../locales/nl/translation.json\";\nimport ptBRTranslation from \"../locales/ptBR/translation.json\";\nimport trTranslation from \"../locales/tr/translation.json\";\nimport itTranslation from \"../locales/it/translation.json\";\n\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\n    da: {\n        name: \"Dansk\",\n        locale: \"da-DK\"\n    },\n    en: {\n        name: \"English\",\n        locale: \"en-US\"\n    },\n    es: {\n        name: \"Español\",\n        locale: \"es-ES\"\n    },\n    fr: {\n        name: \"Français\",\n        locale: \"fr-FR\"\n    },\n    ja: {\n        name: \"日本語\",\n        locale: \"ja-JP\"\n    },\n    nl: {\n        name: \"Nederlands\",\n        locale: \"nl-NL\"\n    },\n    ptBR: {\n        name: \"Português Brasileiro\",\n        locale: \"pt-BR\"\n    },\n    tr: {\n        name: \"Türkçe\",\n        locale: \"tr-TR\"\n    },\n    it: {\n        name: \"Italiano\",\n        locale: \"it-IT\"\n    }\n};\n\ni18next\n    .use(HttpApi)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        resources: {\n            da: { translation: daTranslation },\n            en: { translation: enTranslation },\n            es: { translation: esTranslation },\n            fr: { translation: frTranslation },\n            ja: { translation: jaTranslation },\n            nl: { translation: nlTranslation },\n            ptBR: { translation: ptBRTranslation },\n            tr: { translation: trTranslation },\n            it: { translation: itTranslation }\n        },\n        fallbackLng: \"en\",\n        supportedLngs: Object.keys(supportedLngs),\n        debug: import.meta.env.DEV,\n        interpolation: {\n            escapeValue: false // not needed for react as it escapes by default\n        }\n    });\n\nexport default i18next;\n","import { useState } from \"react\";\nimport { IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    answer: string;\n}\n\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\n\nlet synth: SpeechSynthesis | null = null;\n\ntry {\n    synth = SpeechSynthesis;\n} catch (err) {\n    console.error(\"SpeechSynthesis is not supported\");\n}\n\nconst getUtterance = function (text: string, lngCode: string = \"en-US\") {\n    if (synth) {\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.lang = lngCode;\n        utterance.volume = 1;\n        utterance.rate = 1;\n        utterance.pitch = 1;\n\n        let voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === lngCode)[0];\n        if (!voice) {\n            voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === \"en-US\")[0];\n        }\n\n        utterance.voice = voice;\n        return utterance;\n    }\n};\n\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\n    const { t, i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\n\n    const startOrStopSpeech = (answer: string) => {\n        if (synth != null) {\n            if (isPlaying) {\n                synth.cancel(); // removes all utterances from the utterance queue.\n                setIsPlaying(false);\n                return;\n            }\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer, lngCode);\n\n            if (!utterance) {\n                return;\n            }\n\n            synth.speak(utterance);\n\n            utterance.onstart = () => {\n                setIsPlaying(true);\n                return;\n            };\n\n            utterance.onend = () => {\n                setIsPlaying(false);\n                return;\n            };\n        }\n    };\n    const color = isPlaying ? \"red\" : \"black\";\n\n    return (\n        <IconButton\n            style={{ color: color }}\n            iconProps={{ iconName: \"Volume3\" }}\n            title={t(\"tooltips.speakAnswer\")}\n            ariaLabel={t(\"tooltips.speakAnswer\")}\n            onClick={() => startOrStopSpeech(answer)}\n            disabled={!synth}\n        />\n    );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { IconButton } from \"@fluentui/react\";\nimport { getSpeechApi, SpeechConfig } from \"../../api\";\n\ninterface Props {\n    answer: string;\n    speechConfig: SpeechConfig;\n    index: number;\n    isStreaming: boolean;\n}\n\nexport const SpeechOutputAzure = ({ answer, speechConfig, index, isStreaming }: Props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [localPlayingState, setLocalPlayingState] = useState(false);\n    const { t } = useTranslation();\n\n    const playAudio = async (url: string) => {\n        speechConfig.audio.src = url;\n        await speechConfig.audio\n            .play()\n            .then(() => {\n                speechConfig.audio.onended = () => {\n                    speechConfig.setIsPlaying(false);\n                    setLocalPlayingState(false);\n                };\n                speechConfig.setIsPlaying(true);\n                setLocalPlayingState(true);\n            })\n            .catch(() => {\n                alert(\"Failed to play speech output.\");\n                console.error(\"Failed to play speech output.\");\n                speechConfig.setIsPlaying(false);\n                setLocalPlayingState(false);\n            });\n    };\n\n    const startOrStopSpeech = async (answer: string) => {\n        if (speechConfig.isPlaying) {\n            speechConfig.audio.pause();\n            speechConfig.audio.currentTime = 0;\n            speechConfig.setIsPlaying(false);\n            setLocalPlayingState(false);\n            return;\n        }\n        if (speechConfig.speechUrls[index]) {\n            playAudio(speechConfig.speechUrls[index]);\n            return;\n        }\n        setIsLoading(true);\n        await getSpeechApi(answer).then(async speechUrl => {\n            if (!speechUrl) {\n                alert(\"Speech output is not available.\");\n                console.error(\"Speech output is not available.\");\n                return;\n            }\n            setIsLoading(false);\n            speechConfig.setSpeechUrls(speechConfig.speechUrls.map((url, i) => (i === index ? speechUrl : url)));\n            playAudio(speechUrl);\n        });\n    };\n\n    const color = localPlayingState ? \"red\" : \"black\";\n\n    // We always preload the Sync icon in hidden mode so that there's no visual glitch when icon changes\n    return isLoading ? (\n        <IconButton style={{ color: color }} iconProps={{ iconName: \"Sync\" }} title=\"Loading speech\" ariaLabel=\"Loading speech\" disabled={true} />\n    ) : (\n        <>\n            <IconButton iconProps={{ iconName: \"Sync\" }} ariaHidden={true} disabled={true} style={{ display: \"none\" }} />\n            <IconButton\n                style={{ color: color }}\n                iconProps={{ iconName: \"Volume3\" }}\n                title={t(\"tooltips.speakAnswer\")}\n                ariaLabel={t(\"tooltips.speakAnswer\")}\n                onClick={() => startOrStopSpeech(answer)}\n                disabled={isStreaming}\n            />\n        </>\n    );\n};\n","import { useMemo, useState, useRef, useEffect } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport DOMPurify from \"dompurify\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\n\nimport styles from \"./Answer.module.css\";\nimport { ChatAppResponse, getCitationFilePath, SpeechConfig } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\n\ninterface Props {\n    answer: ChatAppResponse;\n    index: number;\n    speechConfig: SpeechConfig;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n    showSpeechOutputBrowser?: boolean;\n    showSpeechOutputAzure?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    index,\n    speechConfig,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions,\n    showSpeechOutputAzure,\n    showSpeechOutputBrowser\n}: Props) => {\n    const followupQuestions = answer.context?.followup_questions;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer, isStreaming, onCitationClicked), [answer]);\n    const { t } = useTranslation();\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n    const [copied, setCopied] = useState(false);\n    const [expanded, setExpanded] = useState(false);\n    const answerTextRef = useRef<HTMLDivElement>(null);\n    const [isLong, setIsLong] = useState(false);\n\n    useEffect(() => {\n        if (answerTextRef.current) {\n            const el = answerTextRef.current;\n            // Check if the answer is long (more than 8 lines or 400px height)\n            const lineCount = el.innerText.split(\"\\n\").length;\n            setIsLong(el.scrollHeight > 400 || lineCount > 8);\n        }\n    }, [sanitizedAnswerHtml, isStreaming]);\n\n    const handleCopy = () => {\n        // Single replace to remove all HTML tags to remove the citations\n        const textToCopy = typeof sanitizedAnswerHtml === \"string\" ? sanitizedAnswerHtml.replace(/<a [^>]*><sup>\\d+<\\/sup><\\/a>|<[^>]+>/g, \"\") : \"\";\n\n        navigator.clipboard\n            .writeText(textToCopy)\n            .then(() => {\n                setCopied(true);\n                setTimeout(() => setCopied(false), 2000);\n            })\n            .catch(err => console.error(\"Failed to copy text: \", err));\n    };\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: copied ? \"CheckMark\" : \"Copy\" }}\n                            title={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            ariaLabel={copied ? t(\"tooltips.copied\") : t(\"tooltips.copy\")}\n                            onClick={handleCopy}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title={t(\"tooltips.showThoughtProcess\")}\n                            ariaLabel={t(\"tooltips.showThoughtProcess\")}\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.context.thoughts?.length || isStreaming}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title={t(\"tooltips.showSupportingContent\")}\n                            ariaLabel={t(\"tooltips.showSupportingContent\")}\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.context.data_points || isStreaming}\n                        />\n                        {showSpeechOutputAzure && (\n                            <SpeechOutputAzure answer={sanitizedAnswerHtml} index={index} speechConfig={speechConfig} isStreaming={isStreaming} />\n                        )}\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div\n                    className={styles.answerText}\n                    ref={answerTextRef}\n                    style={\n                        isLong && !expanded\n                            ? {\n                                  maxHeight: 600,\n                                  overflow: \"hidden\",\n                                  position: \"relative\",\n                                  WebkitMaskImage: \"linear-gradient(180deg, #000 75%, transparent)\",\n                                  maskImage: \"linear-gradient(180deg, #000 75%, transparent)\"\n                              }\n                            : { maxHeight: \"none\", overflow: \"visible\" }\n                    }\n                >\n                    <ReactMarkdown children={sanitizedAnswerHtml} rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} />\n                </div>\n                {isLong && (\n                    <div style={{ textAlign: \"center\", marginTop: \"0.5em\" }}>\n                        <button\n                            onClick={() => setExpanded(e => !e)}\n                            style={{\n                                background: \"#e8ebfa\",\n                                color: \"#123bb6\",\n                                border: \"none\",\n                                borderRadius: \"0.25em\",\n                                padding: \"0.5em 1.5em\",\n                                fontWeight: 600,\n                                cursor: \"pointer\",\n                                fontSize: \"1em\"\n                            }}\n                        >\n                            {expanded ? t(\"Collapse\") : t(\"Show More\")}\n                        </button>\n                    </div>\n                )}\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>{t(\"citationWithColon\")}</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>{t(\"followupQuestions\")}</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const { t, i18n } = useTranslation();\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        {t(\"generatingAnswer\")}\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { SetStateAction, useState } from \"react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Mic28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./QuestionInput.module.css\";\nimport { supportedLngs } from \"../../i18n/config\";\n\ninterface Props {\n    updateQuestion: (question: string) => void;\n}\n\nconst useCustomSpeechRecognition = () => {\n    const { i18n } = useTranslation();\n    const currentLng = i18n.language;\n    let lngCode = supportedLngs[currentLng]?.locale;\n    if (!lngCode) {\n        lngCode = \"en-US\";\n    }\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    let speechRecognition: {\n        continuous: boolean;\n        lang: string;\n        interimResults: boolean;\n        maxAlternatives: number;\n        start: () => void;\n        onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\n        onend: () => void;\n        onerror: (event: { error: string }) => void;\n        stop: () => void;\n    } | null = null;\n\n    try {\n        speechRecognition = new SpeechRecognition();\n        if (speechRecognition != null) {\n            speechRecognition.lang = lngCode;\n            speechRecognition.interimResults = true;\n        }\n    } catch (err) {\n        console.error(\"SpeechRecognition not supported\");\n        speechRecognition = null;\n    }\n\n    return speechRecognition;\n};\n\nexport const SpeechInput = ({ updateQuestion }: Props) => {\n    let speechRecognition = useCustomSpeechRecognition();\n    const { t } = useTranslation();\n    const [isRecording, setIsRecording] = useState<boolean>(false);\n    const startRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\n            let input = \"\";\n            for (const result of event.results) {\n                input += result[0].transcript;\n            }\n            updateQuestion(input);\n        };\n        speechRecognition.onend = () => {\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\n            setIsRecording(false);\n        };\n        speechRecognition.onerror = (event: { error: string }) => {\n            if (speechRecognition) {\n                speechRecognition.stop();\n                if (event.error == \"no-speech\") {\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\n                } else if (event.error == \"language-not-supported\") {\n                    alert(\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\n                    );\n                } else {\n                    alert(`Speech recognition error detected: ${event.error}.`);\n                }\n            }\n        };\n\n        setIsRecording(true);\n        speechRecognition.start();\n    };\n\n    const stopRecording = () => {\n        if (speechRecognition == null) {\n            console.error(\"SpeechRecognition not supported\");\n            return;\n        }\n        speechRecognition.stop();\n        setIsRecording(false);\n    };\n\n    if (speechRecognition == null) {\n        return <></>;\n    }\n    return (\n        <>\n            {!isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.askWithVoice\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\n                    </Tooltip>\n                </div>\n            )}\n            {isRecording && (\n                <div className={styles.questionInputButtonsContainer}>\n                    <Tooltip content={t(\"tooltips.stopRecording\")} relationship=\"label\">\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\n                    </Tooltip>\n                </div>\n            )}\n        </>\n    );\n};\n","/**\n * This file defines a context for managing login state in a React application.\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n * For more information, refer to the official React documentation:\n * https://react.dev/learn/passing-data-deeply-with-context\n */\n\nimport { createContext } from \"react\";\n\nexport const LoginContext = createContext({\n    loggedIn: false,\n    setLoggedIn: (_: boolean) => {}\n});\n","import { useState, useEffect, useContext } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./QuestionInput.module.css\";\nimport { SpeechInput } from \"./SpeechInput\";\nimport { LoginContext } from \"../../loginContext\";\nimport { requireLogin } from \"../../authConfig\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n    showSpeechInput?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, showSpeechInput }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n    const { loggedIn } = useContext(LoginContext);\n    const { t } = useTranslation();\n    const [isComposing, setIsComposing] = useState(false);\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (isComposing) return;\n\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const handleCompositionStart = () => {\n        setIsComposing(true);\n    };\n    const handleCompositionEnd = () => {\n        setIsComposing(false);\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\n\n    if (disableRequiredAccessControl) {\n        placeholder = \"Please login to continue...\";\n    }\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                disabled={disableRequiredAccessControl}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n                onCompositionStart={handleCompositionStart}\n                onCompositionEnd={handleCompositionEnd}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content={t(\"tooltips.submitQuestion\")} relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\n                </Tooltip>\n            </div>\n            {showSpeechInput && <SpeechInput updateQuestion={setQuestion} />}\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./Example.module.css\";\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n    useGPT4V?: boolean;\n}\n\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\n    const { t } = useTranslation();\n\n    const DEFAULT_EXAMPLES: string[] = [t(\"defaultExamples.1\"), t(\"defaultExamples.2\"), t(\"defaultExamples.3\")];\n    const GPT4V_EXAMPLES: string[] = [t(\"gpt4vExamples.1\"), t(\"gpt4vExamples.2\"), t(\"gpt4vExamples.3\")];\n\n    return (\n        <ul className={styles.examplesNavList}>\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","import DOMPurify from \"dompurify\";\n\ntype ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[] | { text: string[]; images?: string[] };\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {textItems.map((c, ind) => {\n                const parsed = parseSupportingContentItem(c);\n                return (\n                    <li className={styles.supportingContentItem} key={`supporting-content-text-${ind}`}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\n                    </li>\n                );\n            })}\n            {imageItems?.map((img, ind) => {\n                return (\n                    <li className={styles.supportingContentItem} key={`supporting-content-image-${ind}`}>\n                        <img className={styles.supportingContentItemImage} src={img} />\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import React from \"react\";\nimport styles from \"./AnalysisPanel.module.css\";\n\nexport interface TokenUsage {\n    prompt_tokens: number;\n    completion_tokens: number;\n    reasoning_tokens: number;\n    total_tokens: number;\n}\n\ninterface TokenUsageGraphProps {\n    tokenUsage: TokenUsage;\n    reasoningEffort?: string;\n}\n\nexport const TokenUsageGraph: React.FC<TokenUsageGraphProps> = ({ tokenUsage, reasoningEffort }) => {\n    const { prompt_tokens, completion_tokens, reasoning_tokens, total_tokens } = tokenUsage;\n\n    // Calculate percentage widths relative to total_tokens\n    const calcPercent = (value: number) => (total_tokens ? (value / total_tokens) * 100 : 0) + \"%\";\n\n    return (\n        <div className={styles.tokenUsageGraph}>\n            <div className={styles.header}>Token Usage</div>\n            <div className={styles.primaryBarContainer} style={{ width: \"100%\" }}>\n                <div className={`${styles.tokenBar} ${styles.promptBar}`} style={{ width: calcPercent(prompt_tokens) }}>\n                    <span className={styles.tokenLabel}>Prompt: {prompt_tokens}</span>\n                </div>\n                {reasoningEffort != null && reasoningEffort !== \"\" && (\n                    <div className={`${styles.tokenBar} ${styles.reasoningBar}`} style={{ width: calcPercent(reasoning_tokens) }}>\n                        <span className={styles.tokenLabel}>Reasoning: {reasoning_tokens}</span>\n                    </div>\n                )}\n                <div className={`${styles.tokenBar} ${styles.outputBar}`} style={{ width: calcPercent(completion_tokens - reasoning_tokens) }}>\n                    <span className={styles.tokenLabel}>Output: {completion_tokens - reasoning_tokens}</span>\n                </div>\n            </div>\n\n            <div className={`${styles.tokenBar} ${styles.totalBar}`} style={{ width: calcPercent(total_tokens) }}>\n                <span className={styles.tokenLabel}>Total: {total_tokens}</span>\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { TokenUsageGraph, TokenUsage } from \"./TokenUsageGraph\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\nimport styles from \"./AnalysisPanel.module.css\";\nSyntaxHighlighter.registerLanguage(\"json\", json);\n\ntype ModelQueryPlanningStep = {\n    id: number;\n    type: \"ModelQueryPlanning\";\n    input_tokens: number;\n    output_tokens: number;\n};\n\ntype AzureSearchQueryStep = {\n    id: number;\n    type: \"AzureSearchQuery\";\n    target_index: string;\n    query: { search: string };\n    query_time: string;\n    count: number;\n    elapsed_ms: number;\n};\n\ntype Step = ModelQueryPlanningStep | AzureSearchQueryStep;\n\ninterface Props {\n    query_plan: Step[];\n    description: any;\n}\n\nexport const AgentPlan: React.FC<Props> = ({ query_plan, description }) => {\n    // find the planning step\n    const planning = query_plan.find((step): step is ModelQueryPlanningStep => step.type === \"ModelQueryPlanning\");\n\n    // collect all search query steps\n    const queries = query_plan.filter((step): step is AzureSearchQueryStep => step.type === \"AzureSearchQuery\");\n\n    return (\n        <div>\n            {planning && (\n                <TokenUsageGraph\n                    tokenUsage={\n                        {\n                            prompt_tokens: planning.input_tokens,\n                            completion_tokens: planning.output_tokens,\n                            reasoning_tokens: 0,\n                            total_tokens: planning.input_tokens + planning.output_tokens\n                        } as TokenUsage\n                    }\n                />\n            )}\n\n            <div className={styles.header}>Subqueries</div>\n            {queries.length > 0 && (\n                <table className={styles.subqueriesTable}>\n                    <thead>\n                        <tr>\n                            <th>Subquery</th>\n                            <th>Total Result Count</th>\n                            <th>Elapsed MS</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {queries.map(q => (\n                            <tr key={q.id}>\n                                <td>{q.query.search}</td>\n                                <td>{q.count}</td>\n                                <td>{q.elapsed_ms}</td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            )}\n        </div>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { Thoughts } from \"../../api\";\nimport { TokenUsageGraph } from \"./TokenUsageGraph\";\nimport { AgentPlan } from \"./AgentPlan\";\n\nSyntaxHighlighter.registerLanguage(\"json\", json);\n\ninterface Props {\n    thoughts: Thoughts[];\n}\n\nexport const ThoughtProcess = ({ thoughts }: Props) => {\n    return (\n        <ul className={styles.tList}>\n            {thoughts.map((t, ind) => {\n                return (\n                    <li className={styles.tListItem} key={ind}>\n                        <div className={styles.tStep}>{t.title}</div>\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\n                            {t.props &&\n                                (Object.keys(t.props).filter(k => k !== \"token_usage\" && k !== \"query_plan\") || []).map((k: any) => (\n                                    <span className={styles.tProp} key={k}>\n                                        {k}: {JSON.stringify(t.props?.[k])}\n                                    </span>\n                                ))}\n                        </Stack>\n                        {t.props?.token_usage && <TokenUsageGraph tokenUsage={t.props.token_usage} reasoningEffort={t.props.reasoning_effort} />}\n                        {t.props?.query_plan && <AgentPlan query_plan={t.props.query_plan} description={t.description} />}\n                        {Array.isArray(t.description) ? (\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock} style={a11yLight}>\n                                {JSON.stringify(t.description, null, 2)}\n                            </SyntaxHighlighter>\n                        ) : (\n                            <div>{t.description}</div>\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nimport styles from \"./MarkdownViewer.module.css\";\n\ninterface MarkdownViewerProps {\n    src: string;\n}\n\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\n    const [content, setContent] = useState<string>(\"\");\n    const [isLoading, setIsLoading] = useState<boolean>(true);\n    const [error, setError] = useState<Error | null>(null);\n    const { t } = useTranslation();\n\n    /**\n     * Anchor links result in HTTP 404 errors as the URL they point to does not exist.\n     * This function removes them from the markdown.\n     */\n    const removeAnchorLinks = (markdown: string) => {\n        const ancorLinksRegex = /\\[.*?\\]\\(#.*?\\)/g;\n        return markdown.replace(ancorLinksRegex, \"\");\n    };\n\n    useEffect(() => {\n        const fetchMarkdown = async () => {\n            try {\n                const response = await fetch(src);\n\n                if (!response.ok) {\n                    throw new Error(\"Failed loading markdown file.\");\n                }\n\n                let markdownText = await response.text();\n                markdownText = removeAnchorLinks(markdownText);\n                setContent(markdownText);\n            } catch (error: any) {\n                setError(error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        fetchMarkdown();\n    }, [src]);\n\n    return (\n        <div>\n            {isLoading ? (\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\n                </div>\n            ) : error ? (\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\n                        {error.message}\n                        <Link href={src} download>\n                            Download the file\n                        </Link>\n                    </MessageBar>\n                </div>\n            ) : (\n                <div>\n                    <IconButton\n                        className={styles.downloadButton}\n                        style={{ color: \"black\" }}\n                        iconProps={{ iconName: \"Save\" }}\n                        title={t(\"tooltips.save\")}\n                        ariaLabel={t(\"tooltips.save\")}\n                        href={src}\n                        download\n                    />\n                    <ReactMarkdown children={content} remarkPlugins={[remarkGfm]} className={`${styles.markdown} ${styles.markdownViewer}`} />\n                </div>\n            )}\n        </div>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { ChatAppResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\nimport { ThoughtProcess } from \"./ThoughtProcess\";\nimport { MarkdownViewer } from \"../MarkdownViewer\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { getHeaders } from \"../../api\";\nimport { useLogin, getToken } from \"../../authConfig\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: ChatAppResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\n    const isDisabledCitationTab: boolean = !activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { t } = useTranslation();\n\n    const fetchCitation = async () => {\n        const token = client ? await getToken(client) : undefined;\n        if (activeCitation) {\n            // Get hash from the URL as it may contain #page=N\n            // which helps browser PDF renderer jump to correct page N\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\n            const response = await fetch(activeCitation, {\n                method: \"GET\",\n                headers: await getHeaders(token)\n            });\n            const citationContent = await response.blob();\n            let citationObjectUrl = URL.createObjectURL(citationContent);\n            // Add hash back to the new blob URL\n            if (originalHash) {\n                citationObjectUrl += \"#\" + originalHash;\n            }\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    const renderFileViewer = () => {\n        if (!activeCitation) {\n            return null;\n        }\n\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\n        switch (fileExtension) {\n            case \"png\":\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\n            case \"md\":\n                return <MarkdownViewer src={activeCitation} />;\n            default:\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\n        }\n    };\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText={t(\"headerTexts.thoughtProcess\")}\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText={t(\"headerTexts.supportingContent\")}\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.context.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText={t(\"headerTexts.citation\")}\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                {renderFileViewer()}\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { useState, useCallback } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./HistoryItem.module.css\";\nimport { DefaultButton } from \"@fluentui/react\";\nimport { Delete24Regular } from \"@fluentui/react-icons\";\n\nexport interface HistoryData {\n    id: string;\n    title: string;\n    timestamp: number;\n}\n\ninterface HistoryItemProps {\n    item: HistoryData;\n    onSelect: (id: string) => void;\n    onDelete: (id: string) => void;\n}\n\nexport function HistoryItem({ item, onSelect, onDelete }: HistoryItemProps) {\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const handleDelete = useCallback(() => {\n        setIsModalOpen(false);\n        onDelete(item.id);\n    }, [item.id, onDelete]);\n\n    return (\n        <div className={styles.historyItem}>\n            <button onClick={() => onSelect(item.id)} className={styles.historyItemButton}>\n                <div className={styles.historyItemTitle}>{item.title}</div>\n            </button>\n            <button onClick={() => setIsModalOpen(true)} className={styles.deleteButton} aria-label=\"delete this chat history\">\n                <Delete24Regular className={styles.deleteIcon} />\n            </button>\n            <DeleteHistoryModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onConfirm={handleDelete} />\n        </div>\n    );\n}\n\nfunction DeleteHistoryModal({ isOpen, onClose, onConfirm }: { isOpen: boolean; onClose: () => void; onConfirm: () => void }) {\n    if (!isOpen) return null;\n    const { t } = useTranslation();\n    return (\n        <div className={styles.modalOverlay}>\n            <div className={styles.modalContent}>\n                <h2 className={styles.modalTitle}>{t(\"history.deleteModalTitle\")}</h2>\n                <p className={styles.modalDescription}>{t(\"history.deleteModalDescription\")}</p>\n                <div className={styles.modalActions}>\n                    <DefaultButton onClick={onClose} className={styles.modalCancelButton}>\n                        {t(\"history.cancelLabel\")}\n                    </DefaultButton>\n                    <DefaultButton onClick={onConfirm} className={styles.modalConfirmButton}>\n                        {t(\"history.deleteLabel\")}\n                    </DefaultButton>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { ChatAppResponse } from \"../../api\";\n\nexport type HistoryMetaData = { id: string; title: string; timestamp: number };\nexport type Answers = [user: string, response: ChatAppResponse][];\n\nexport const enum HistoryProviderOptions {\n    None = \"none\",\n    IndexedDB = \"indexedDB\",\n    CosmosDB = \"cosmosDB\"\n}\n\nexport interface IHistoryProvider {\n    getProviderName(): HistoryProviderOptions;\n    resetContinuationToken(): void;\n    getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]>;\n    addItem(id: string, answers: Answers, idToken?: string): Promise<void>;\n    getItem(id: string, idToken?: string): Promise<Answers | null>;\n    deleteItem(id: string, idToken?: string): Promise<void>;\n}\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\n\nexport class NoneProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.None;\n    resetContinuationToken(): void {\n        return;\n    }\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\n        return [];\n    }\n    async addItem(id: string, answers: Answers): Promise<void> {\n        return;\n    }\n    async getItem(id: string): Promise<null> {\n        return null;\n    }\n    async deleteItem(id: string): Promise<void> {\n        return;\n    }\n}\n","import { IDBPDatabase, openDB } from \"idb\";\nimport { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\n\nexport class IndexedDBProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.IndexedDB;\n\n    private dbName: string;\n    private storeName: string;\n    private dbPromise: Promise<IDBPDatabase> | null = null;\n    private cursorKey: IDBValidKey | undefined;\n    private isCusorEnd: boolean = false;\n\n    constructor(dbName: string, storeName: string) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.cursorKey = undefined;\n        this.isCusorEnd = false;\n    }\n\n    private async init() {\n        const storeName = this.storeName;\n        if (!this.dbPromise) {\n            this.dbPromise = openDB(this.dbName, 1, {\n                upgrade(db) {\n                    if (!db.objectStoreNames.contains(storeName)) {\n                        const store = db.createObjectStore(storeName, { keyPath: \"id\" });\n                        store.createIndex(\"timestamp\", \"timestamp\");\n                    }\n                }\n            });\n        }\n        return this.dbPromise;\n    }\n\n    resetContinuationToken() {\n        this.cursorKey = undefined;\n        this.isCusorEnd = false;\n    }\n\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\n        const db = await this.init();\n        const tx = db.transaction(this.storeName, \"readonly\");\n        const store = tx.objectStore(this.storeName);\n        const index = store.index(\"timestamp\");\n\n        // return empty array if cursor is already at the end\n        if (this.isCusorEnd) {\n            return [];\n        }\n\n        // set cursor to the last key\n        let cursor = this.cursorKey ? await index.openCursor(IDBKeyRange.upperBound(this.cursorKey), \"prev\") : await index.openCursor(null, \"prev\");\n\n        // return empty array means no more history or no data. set isCursorEnd to true and return empty array\n        if (!cursor) {\n            this.isCusorEnd = true;\n            return [];\n        }\n\n        const loadedItems: { id: string; title: string; timestamp: number; answers: Answers }[] = [];\n        for (let i = 0; i < count && cursor; i++) {\n            loadedItems.push(cursor.value);\n            cursor = await cursor.continue();\n        }\n\n        // set isCursorEnd to true if cursor is null\n        if (!cursor) {\n            this.isCusorEnd = true;\n        }\n\n        // update cursorKey\n        this.cursorKey = cursor?.key;\n\n        return loadedItems;\n    }\n\n    async addItem(id: string, answers: Answers): Promise<void> {\n        const timestamp = new Date().getTime();\n        const db = await this.init(); // 自動的に初期化\n        const tx = db.transaction(this.storeName, \"readwrite\");\n        const current = await tx.objectStore(this.storeName).get(id);\n        if (current) {\n            await tx.objectStore(this.storeName).put({ ...current, id, timestamp, answers });\n        } else {\n            const title = answers[0][0].length > 50 ? answers[0][0].substring(0, 50) + \"...\" : answers[0][0];\n            await tx.objectStore(this.storeName).add({ id, title, timestamp, answers });\n        }\n        await tx.done;\n        return;\n    }\n\n    async getItem(id: string): Promise<Answers | null> {\n        const db = await this.init();\n        const tx = db.transaction(this.storeName, \"readonly\");\n        const item = await tx.objectStore(this.storeName).get(id);\n        return item ? item.answers : null;\n    }\n\n    async deleteItem(id: string): Promise<void> {\n        const db = await this.init();\n        await db.delete(this.storeName, id);\n        return;\n    }\n}\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\nimport { deleteChatHistoryApi, getChatHistoryApi, getChatHistoryListApi, postChatHistoryApi } from \"../../api\";\n\nexport class CosmosDBProvider implements IHistoryProvider {\n    getProviderName = () => HistoryProviderOptions.CosmosDB;\n\n    private continuationToken: string | undefined;\n    private isItemEnd: boolean = false;\n\n    resetContinuationToken() {\n        this.continuationToken = undefined;\n        this.isItemEnd = false;\n    }\n\n    async getNextItems(count: number, idToken?: string): Promise<HistoryMetaData[]> {\n        if (this.isItemEnd) {\n            return [];\n        }\n\n        try {\n            const response = await getChatHistoryListApi(count, this.continuationToken, idToken || \"\");\n            this.continuationToken = response.continuation_token;\n            if (!this.continuationToken) {\n                this.isItemEnd = true;\n            }\n            return response.sessions.map(session => ({\n                id: session.id,\n                title: session.title,\n                timestamp: session.timestamp\n            }));\n        } catch (e) {\n            console.error(e);\n            return [];\n        }\n    }\n\n    async addItem(id: string, answers: Answers, idToken?: string): Promise<void> {\n        await postChatHistoryApi({ id, answers }, idToken || \"\");\n        return;\n    }\n\n    async getItem(id: string, idToken?: string): Promise<Answers | null> {\n        const response = await getChatHistoryApi(id, idToken || \"\");\n        return response.answers || null;\n    }\n\n    async deleteItem(id: string, idToken?: string): Promise<void> {\n        await deleteChatHistoryApi(id, idToken || \"\");\n        return;\n    }\n}\n","import { useMemo } from \"react\";\nimport { IHistoryProvider, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\nimport { NoneProvider } from \"../HistoryProviders/None\";\nimport { IndexedDBProvider } from \"../HistoryProviders/IndexedDB\";\nimport { CosmosDBProvider } from \"../HistoryProviders/CosmosDB\";\n\nexport const useHistoryManager = (provider: HistoryProviderOptions): IHistoryProvider => {\n    const providerInstance = useMemo(() => {\n        switch (provider) {\n            case HistoryProviderOptions.IndexedDB:\n                return new IndexedDBProvider(\"chat-database\", \"chat-history\");\n            case HistoryProviderOptions.CosmosDB:\n                return new CosmosDBProvider();\n            case HistoryProviderOptions.None:\n            default:\n                return new NoneProvider();\n        }\n    }, [provider]);\n\n    return providerInstance;\n};\n","import { useMsal } from \"@azure/msal-react\";\nimport { getToken, useLogin } from \"../../authConfig\";\nimport { Panel, PanelType, Spinner } from \"@fluentui/react\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { HistoryData, HistoryItem } from \"../HistoryItem\";\nimport { Answers, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\nimport { useHistoryManager, HistoryMetaData } from \"../HistoryProviders\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./HistoryPanel.module.css\";\n\nconst HISTORY_COUNT_PER_LOAD = 20;\n\nexport const HistoryPanel = ({\n    provider,\n    isOpen,\n    notify,\n    onClose,\n    onChatSelected\n}: {\n    provider: HistoryProviderOptions;\n    isOpen: boolean;\n    notify: boolean;\n    onClose: () => void;\n    onChatSelected: (answers: Answers) => void;\n}) => {\n    const historyManager = useHistoryManager(provider);\n    const [history, setHistory] = useState<HistoryMetaData[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [hasMoreHistory, setHasMoreHistory] = useState(false);\n\n    const client = useLogin ? useMsal().instance : undefined;\n\n    useEffect(() => {\n        if (!isOpen) return;\n        if (notify) {\n            setHistory([]);\n            historyManager.resetContinuationToken();\n            setHasMoreHistory(true);\n        }\n    }, [isOpen, notify]);\n\n    const loadMoreHistory = async () => {\n        setIsLoading(() => true);\n        const token = client ? await getToken(client) : undefined;\n        const items = await historyManager.getNextItems(HISTORY_COUNT_PER_LOAD, token);\n        if (items.length === 0) {\n            setHasMoreHistory(false);\n        }\n        setHistory(prevHistory => [...prevHistory, ...items]);\n        setIsLoading(() => false);\n    };\n\n    const handleSelect = async (id: string) => {\n        const token = client ? await getToken(client) : undefined;\n        const item = await historyManager.getItem(id, token);\n        if (item) {\n            onChatSelected(item);\n        }\n    };\n\n    const handleDelete = async (id: string) => {\n        const token = client ? await getToken(client) : undefined;\n        await historyManager.deleteItem(id, token);\n        setHistory(prevHistory => prevHistory.filter(item => item.id !== id));\n    };\n\n    const groupedHistory = useMemo(() => groupHistory(history), [history]);\n\n    const { t } = useTranslation();\n\n    return (\n        <Panel\n            type={PanelType.customNear}\n            style={{ padding: \"0px\" }}\n            headerText={t(\"history.chatHistory\")}\n            customWidth=\"300px\"\n            isBlocking={false}\n            isOpen={isOpen}\n            onDismiss={() => onClose()}\n            onDismissed={() => {\n                setHistory([]);\n                setHasMoreHistory(true);\n                historyManager.resetContinuationToken();\n            }}\n        >\n            <div>\n                {Object.entries(groupedHistory).map(([group, items]) => (\n                    <div key={group} className={styles.group}>\n                        <p className={styles.groupLabel}>{t(group)}</p>\n                        {items.map(item => (\n                            <HistoryItem key={item.id} item={item} onSelect={handleSelect} onDelete={handleDelete} />\n                        ))}\n                    </div>\n                ))}\n                {isLoading && <Spinner style={{ marginTop: \"10px\" }} />}\n                {history.length === 0 && !isLoading && <p>{t(\"history.noHistory\")}</p>}\n                {hasMoreHistory && !isLoading && <InfiniteLoadingButton func={loadMoreHistory} />}\n            </div>\n        </Panel>\n    );\n};\n\nfunction groupHistory(history: HistoryData[]) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const lastWeek = new Date(today);\n    lastWeek.setDate(lastWeek.getDate() - 7);\n    const lastMonth = new Date(today);\n    lastMonth.setDate(lastMonth.getDate() - 30);\n\n    return history.reduce(\n        (groups, item) => {\n            const itemDate = new Date(item.timestamp);\n            let group;\n\n            if (itemDate >= today) {\n                group = \"history.today\";\n            } else if (itemDate >= yesterday) {\n                group = \"history.yesterday\";\n            } else if (itemDate >= lastWeek) {\n                group = \"history.last7days\";\n            } else if (itemDate >= lastMonth) {\n                group = \"history.last30days\";\n            } else {\n                group = itemDate.toLocaleDateString(undefined, { year: \"numeric\", month: \"long\" });\n            }\n\n            if (!groups[group]) {\n                groups[group] = [];\n            }\n            groups[group].push(item);\n            return groups;\n        },\n        {} as Record<string, HistoryData[]>\n    );\n}\n\nconst InfiniteLoadingButton = ({ func }: { func: () => void }) => {\n    const buttonRef = useRef(null);\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            entries => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        if (buttonRef.current) {\n                            func();\n                        }\n                    }\n                });\n            },\n            {\n                root: null,\n                threshold: 0\n            }\n        );\n\n        if (buttonRef.current) {\n            observer.observe(buttonRef.current);\n        }\n\n        return () => {\n            if (buttonRef.current) {\n                observer.unobserve(buttonRef.current);\n            }\n        };\n    }, []);\n\n    return <button ref={buttonRef} onClick={func} />;\n};\n","import { History24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./HistoryButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const HistoryButton = ({ className, disabled, onClick }: Props) => {\n    const { t } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<History24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"history.openChatHistory\")}\n            </Button>\n        </div>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    const { t } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {t(\"developerSettings\")}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useTranslation } from \"react-i18next\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    const { t, i18n } = useTranslation();\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {t(\"clearChat\")}\n            </Button>\n        </div>\n    );\n};\n","import React, { createContext, useContext, ReactNode } from \"react\";\n\ninterface AppState {\n    feedbackEnabled: boolean;\n    chatHistoryEnabled: boolean;\n    isCosmosDBAvailable: {\n        cosmosDB: boolean;\n    };\n    frontendSettings: {\n        feedback_enabled: boolean;\n    };\n}\n\ninterface AppStateContextType {\n    state: AppState;\n}\n\nconst defaultState: AppState = {\n    feedbackEnabled: false,\n    chatHistoryEnabled: false,\n    isCosmosDBAvailable: {\n        cosmosDB: false\n    },\n    frontendSettings: {\n        feedback_enabled: false\n    }\n};\n\nexport const AppStateContext = createContext<AppStateContextType | undefined>(undefined);\n\ninterface AppProviderProps {\n    children: ReactNode;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = ({ children }) => {\n    return <AppStateContext.Provider value={{ state: defaultState }}>{children}</AppStateContext.Provider>;\n};\n\nexport const useAppState = () => {\n    const context = useContext(AppStateContext);\n    if (context === undefined) {\n        throw new Error(\"useAppState must be used within an AppProvider\");\n    }\n    return context;\n};\n","export enum ChatHistoryLoadingState {\n    Loading = \"loading\",\n    Success = \"success\",\n    Error = \"error\"\n}\n\nexport interface Conversation {\n    id: string;\n    title: string;\n    messages: any[];\n    timestamp: number;\n}\n\nexport enum DialogType {\n    None = \"none\",\n    History = \"history\",\n    Settings = \"settings\"\n}\n\nexport interface Answers {\n    [key: string]: any;\n}\n","import React from \"react\";\nimport styles from \"./FullScreenAnswer.module.css\";\n\ninterface FullScreenAnswerProps {\n    answer: React.ReactNode;\n    onClose: () => void;\n    backToHome?: boolean; // Optional prop for navigation\n}\n\nconst FullScreenAnswer: React.FC<FullScreenAnswerProps> = ({ answer, onClose }) => {\n    return (\n        <div className={styles.fullScreenRoot}>\n            <button className={styles.closeButton} onClick={onClose} aria-label=\"Close\">\n                &larr; Back\n            </button>\n            <div className={styles.answerContent}>{answer}</div>\n        </div>\n    );\n};\n\nexport default FullScreenAnswer;\n","import { useRef, useState, useEffect, useContext, useLayoutEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Panel, DefaultButton, CommandBarButton, IconButton, Dialog, Stack, TextField } from \"@fluentui/react\";\nimport readNDJSONStream from \"ndjson-readablestream\";\nimport { SquareRegular, ShieldLockRegular, ErrorCircleRegular } from \"@fluentui/react-icons\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeRaw from \"rehype-raw\";\nimport uuid4 from \"uuid4\";\nimport { isEmpty } from \"lodash-es\";\nimport DOMPurify from \"dompurify\";\n\nimport appLogo from \"../../assets/applogo.svg\";\nimport styles from \"./Chat.module.css\";\n\nimport {\n    chatApi,\n    configApi,\n    RetrievalMode,\n    ChatAppResponse,\n    ChatAppResponseOrError,\n    ChatAppRequest,\n    ResponseMessage,\n    VectorFields,\n    GPT4VInput,\n    SpeechConfig\n} from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { HistoryPanel } from \"../../components/HistoryPanel\";\nimport { HistoryProviderOptions, useHistoryManager } from \"../../components/HistoryProviders\";\nimport { HistoryButton } from \"../../components/HistoryButton\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { UploadFile } from \"../../components/UploadFile\";\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { LoginContext } from \"../../loginContext\";\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\nimport { Settings } from \"../../components/Settings/Settings\";\nimport { Hero3D } from \"../../components/Hero3D\";\nimport { CareerDashboard } from \"../../components/CareerDashboard\";\nimport { AppStateContext } from \"../../state/AppProvider\";\nimport { useFeedback } from \"../../components/Feedback\";\nimport { ChatHistoryLoadingState, Conversation, Answers } from \"../../types/chat\";\nimport FullScreenAnswer from \"../../components/FullScreenAnswer\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [maxSubqueryCount, setMaxSubqueryCount] = useState<number>(10);\n    const [resultsMergeStrategy, setResultsMergeStrategy] = useState<string>(\"interleaved\");\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useQueryRewriting, setUseQueryRewriting] = useState<boolean>(false);\n    const [reasoningEffort, setReasoningEffort] = useState<string>(\"\");\n    const [streamingEnabled, setStreamingEnabled] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [includeCategory, setIncludeCategory] = useState<string>(\"\");\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n    const [vectorFields, setVectorFields] = useState<VectorFields>(VectorFields.TextAndImageEmbeddings);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatContainerRef = useRef<HTMLDivElement | null>(null);\n    const answerRefs = useRef<(HTMLDivElement | null)[]>([]);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\n\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showQueryRewritingOption, setShowQueryRewritingOption] = useState<boolean>(false);\n    const [showReasoningEffortOption, setShowReasoningEffortOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n    const [showChatHistoryBrowser, setShowChatHistoryBrowser] = useState<boolean>(false);\n    const [showChatHistoryCosmos, setShowChatHistoryCosmos] = useState<boolean>(false);\n    const [showAgenticRetrievalOption, setShowAgenticRetrievalOption] = useState<boolean>(false);\n    const [useAgenticRetrieval, setUseAgenticRetrieval] = useState<boolean>(false);\n\n    const audio = useRef(new Audio()).current;\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    const speechConfig: SpeechConfig = {\n        speechUrls,\n        setSpeechUrls,\n        audio,\n        isPlaying,\n        setIsPlaying\n    };\n\n    const [showAuthMessage, setShowAuthMessage] = useState<boolean>(false);\n\n    const { instance } = useMsal();\n    const appStateContext = useContext(AppStateContext);\n    const FEEDBACK_ENABLED = appStateContext?.state.feedbackEnabled && appStateContext.state.isCosmosDBAvailable?.cosmosDB;\n    const CHAT_HISTORY_ENABLED = appStateContext?.state.isCosmosDBAvailable?.cosmosDB && appStateContext?.state.chatHistoryEnabled;\n    const UI_FEEDBACK = appStateContext?.state.frontendSettings?.feedback_enabled || false;\n    const { updateFeedback } = useFeedback();\n\n    // For showing chat history\n    const [chatHistoryLoadingState, setChatHistoryLoadingState] = useState<ChatHistoryLoadingState>(ChatHistoryLoadingState.Loading);\n    const [historyList, setHistoryList] = useState<Conversation[] | null>(null);\n    const [conversationExists, setConversationExists] = useState<boolean>(false);\n\n    // Chat view state management\n    const [showCareerDashboard, setShowCareerDashboard] = useState<boolean>(true);\n\n    const [fullScreenAnswer, setFullScreenAnswer] = useState<null | { answer: [string, ChatAppResponse]; index: number }>(null);\n    const [pendingCheckIndex, setPendingCheckIndex] = useState<number | null>(null);\n\n    const getConfig = async () => {\n        configApi().then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            if (config.showGPT4VOptions) {\n                setUseGPT4V(true);\n            }\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setUseQueryRewriting(config.showQueryRewritingOption);\n            setShowQueryRewritingOption(config.showQueryRewritingOption);\n            setShowReasoningEffortOption(config.showReasoningEffortOption);\n            setStreamingEnabled(config.streamingEnabled);\n            if (!config.streamingEnabled) {\n                setShouldStream(false);\n            }\n            if (config.showReasoningEffortOption) {\n                setReasoningEffort(config.defaultReasoningEffort);\n            }\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n            setShowUserUpload(config.showUserUpload);\n            setshowLanguagePicker(config.showLanguagePicker);\n            setShowSpeechInput(config.showSpeechInput);\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\n            setShowChatHistoryBrowser(config.showChatHistoryBrowser);\n            setShowChatHistoryCosmos(config.showChatHistoryCosmos);\n            setShowAgenticRetrievalOption(config.showAgenticRetrievalOption);\n            setUseAgenticRetrieval(config.showAgenticRetrievalOption);\n            if (config.showAgenticRetrievalOption) {\n                setRetrieveCount(10);\n            }\n        });\n    };\n\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\n        let answer: string = \"\";\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\n\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    const latestResponse: ChatAppResponse = {\n                        ...askResponse,\n                        message: { content: answer, role: askResponse.message.role }\n                    };\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const event of readNDJSONStream(responseBody)) {\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\n                    event[\"message\"] = event[\"delta\"];\n                    askResponse = event as ChatAppResponse;\n                } else if (event[\"delta\"] && event[\"delta\"][\"content\"]) {\n                    setIsLoading(false);\n                    await updateState(event[\"delta\"][\"content\"]);\n                } else if (event[\"context\"]) {\n                    // Update context with new keys from latest event\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\n                } else if (event[\"error\"]) {\n                    throw Error(event[\"error\"]);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        const fullResponse: ChatAppResponse = {\n            ...askResponse,\n            message: { content: answer, role: askResponse.message.role }\n        };\n        return fullResponse;\n    };\n\n    const client = useLogin ? instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const historyProvider: HistoryProviderOptions = (() => {\n        if (useLogin && showChatHistoryCosmos) return HistoryProviderOptions.CosmosDB;\n        if (showChatHistoryBrowser) return HistoryProviderOptions.IndexedDB;\n        return HistoryProviderOptions.None;\n    })();\n    const historyManager = useHistoryManager(historyProvider);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setShowCareerDashboard(false);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const messages: ResponseMessage[] = answers.flatMap(a => [\n                { content: a[0], role: \"user\" },\n                { content: a[1].message.content, role: \"assistant\" }\n            ]);\n\n            const request: ChatAppRequest = {\n                messages: [...messages, { content: question, role: \"user\" }],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        include_category: includeCategory.length === 0 ? undefined : includeCategory,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        max_subqueries: maxSubqueryCount,\n                        results_merge_strategy: resultsMergeStrategy,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        query_rewriting: useQueryRewriting,\n                        reasoning_effort: reasoningEffort,\n                        suggest_followup_questions: useSuggestFollowupQuestions,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFields,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        language: i18n.language,\n                        use_agentic_retrieval: useAgenticRetrieval,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                // AI Chat Protocol: Client must pass on any session state received from the server\n                session_state: answers.length ? answers[answers.length - 1][1].session_state : null\n            };\n\n            const response = await chatApi(request, shouldStream, token);\n            if (!response.body) {\n                throw Error(\"No response body\");\n            }\n            if (response.status > 299 || !response.ok) {\n                throw Error(`Request failed with status ${response.status}`);\n            }\n            if (shouldStream) {\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\n                setAnswers(prev => {\n                    const newAnswers: [string, ChatAppResponse][] = [...prev, [question, parsedResponse]];\n                    setPendingCheckIndex(newAnswers.length - 1);\n                    return newAnswers;\n                });\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\n                    const token = client ? await getToken(client) : undefined;\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse]], token);\n                }\n            } else {\n                const parsedResponse: ChatAppResponseOrError = await response.json();\n                if (parsedResponse.error) {\n                    throw Error(parsedResponse.error);\n                }\n                setAnswers(prev => {\n                    const newAnswers: [string, ChatAppResponse][] = [...prev, [question, parsedResponse as ChatAppResponse]];\n                    setPendingCheckIndex(newAnswers.length - 1);\n                    return newAnswers;\n                });\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\n                    const token = client ? await getToken(client) : undefined;\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse as ChatAppResponse]], token);\n                }\n            }\n            setSpeechUrls([...speechUrls, null]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setSpeechUrls([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n        setShowCareerDashboard(true);\n    };\n\n    const handleSettingsChange = (field: string, value: any) => {\n        switch (field) {\n            case \"promptTemplate\":\n                setPromptTemplate(value);\n                break;\n            case \"temperature\":\n                setTemperature(value);\n                break;\n            case \"seed\":\n                setSeed(value);\n                break;\n            case \"minimumRerankerScore\":\n                setMinimumRerankerScore(value);\n                break;\n            case \"minimumSearchScore\":\n                setMinimumSearchScore(value);\n                break;\n            case \"retrieveCount\":\n                setRetrieveCount(value);\n                break;\n            case \"maxSubqueryCount\":\n                setMaxSubqueryCount(value);\n                break;\n            case \"resultsMergeStrategy\":\n                setResultsMergeStrategy(value);\n                break;\n            case \"useSemanticRanker\":\n                setUseSemanticRanker(value);\n                break;\n            case \"useQueryRewriting\":\n                setUseQueryRewriting(value);\n                break;\n            case \"reasoningEffort\":\n                setReasoningEffort(value);\n                break;\n            case \"useSemanticCaptions\":\n                setUseSemanticCaptions(value);\n                break;\n            case \"excludeCategory\":\n                setExcludeCategory(value);\n                break;\n            case \"includeCategory\":\n                setIncludeCategory(value);\n                break;\n            case \"useOidSecurityFilter\":\n                setUseOidSecurityFilter(value);\n                break;\n            case \"useGroupsSecurityFilter\":\n                setUseGroupsSecurityFilter(value);\n                break;\n            case \"shouldStream\":\n                setShouldStream(value);\n                break;\n            case \"useSuggestFollowupQuestions\":\n                setUseSuggestFollowupQuestions(value);\n                break;\n            case \"useGPT4V\":\n                setUseGPT4V(value);\n                break;\n            case \"gpt4vInput\":\n                setGPT4VInput(value);\n                break;\n            case \"vectorFields\":\n                setVectorFields(value);\n                break;\n            case \"retrievalMode\":\n                setRetrievalMode(value);\n                break;\n            case \"useAgenticRetrieval\":\n                setUseAgenticRetrieval(value);\n        }\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        setActiveCitation(citation);\n        setActiveAnalysisPanelTab(AnalysisPanelTabs.SupportingContentTab);\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const { t, i18n } = useTranslation();\n\n    useEffect(() => {\n        if (pendingCheckIndex !== null && answerRefs.current[pendingCheckIndex]) {\n            const el = answerRefs.current[pendingCheckIndex];\n            if (el) {\n                const lineCount = el.innerText.split(\"\\n\").length;\n                if (el.scrollHeight > 400 || lineCount > 8) {\n                    setFullScreenAnswer({ answer: answers[pendingCheckIndex], index: pendingCheckIndex });\n                }\n            }\n            setPendingCheckIndex(null);\n        }\n    }, [pendingCheckIndex, answers]);\n\n    return (\n        <div className={styles.chatContainer}>\n            {/* Header with controls */}\n            <div className={styles.chatHeader}>\n                <div className={styles.headerControls}>\n                    <SettingsButton onClick={() => setIsConfigPanelOpen(true)} />\n                    <HistoryButton onClick={() => setIsHistoryPanelOpen(true)} />\n                    <ClearChatButton onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                </div>\n            </div>\n\n            {/* Main chat area - single column, full width */}\n            <div className={styles.chatMainContainer}>\n                {/* Examples section - only show when no conversation started */}\n                {answers.length === 0 && (\n                    <div className={styles.examplesSection}>\n                        <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                    </div>\n                )}\n\n                {/* Chat messages - adaptive height container */}\n                <div className={styles.chatMessagesContainer} ref={chatContainerRef}>\n                    {isStreaming &&\n                        streamedAnswers.map((streamedAnswer, index) => (\n                            <div key={index} className={styles.messageGroup}>\n                                <UserChatMessage message={streamedAnswer[0]} />\n                                <div className={styles.chatMessageGpt}>\n                                    <Answer\n                                        isStreaming={true}\n                                        key={index}\n                                        answer={streamedAnswer[1]}\n                                        index={index}\n                                        speechConfig={speechConfig}\n                                        isSelected={false}\n                                        onCitationClicked={c => onShowCitation(c, index)}\n                                        onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                        onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                        onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                        showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                        showSpeechOutputAzure={showSpeechOutputAzure}\n                                        showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                    />\n                                </div>\n                            </div>\n                        ))}\n                    {!isStreaming &&\n                        answers.map((answer, index) => (\n                            <div key={index} className={styles.messageGroup}>\n                                <UserChatMessage message={answer[0]} />\n                                <div className={styles.chatMessageGpt}>\n                                    <div ref={el => (answerRefs.current[index] = el)}>\n                                        <Answer\n                                            isStreaming={false}\n                                            key={index}\n                                            answer={answer[1]}\n                                            index={index}\n                                            speechConfig={speechConfig}\n                                            isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                            onCitationClicked={c => onShowCitation(c, index)}\n                                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                            showSpeechOutputAzure={showSpeechOutputAzure}\n                                            showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    {isLoading && (\n                        <div className={styles.messageGroup}>\n                            <UserChatMessage message={lastQuestionRef.current} />\n                            <div className={styles.chatMessageGptMinWidth}>\n                                <AnswerLoading />\n                            </div>\n                        </div>\n                    )}\n                    {error ? (\n                        <div className={styles.messageGroup}>\n                            <UserChatMessage message={lastQuestionRef.current} />\n                            <div className={styles.chatMessageGptMinWidth}>\n                                <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                            </div>\n                        </div>\n                    ) : null}\n                </div>\n\n                {/* Input section - fixed at bottom */}\n                <div className={styles.inputSection}>\n                    <QuestionInput\n                        clearOnSend\n                        placeholder=\"Ask me about your career, resume, or interview preparation...\"\n                        disabled={isLoading}\n                        onSend={question => makeApiRequest(question)}\n                        showSpeechInput={false}\n                    />\n                </div>\n            </div>\n\n            {/* Panels remain unchanged */}\n            <Panel\n                headerText=\"Configure answer generation\"\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel=\"Close\"\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <div style={{ padding: \"20px\" }}>\n                    <p>Settings panel - configuration options will be available here.</p>\n                    <Stack tokens={{ childrenGap: 10 }}>\n                        <TextField\n                            label=\"Temperature\"\n                            value={temperature.toString()}\n                            onChange={(_, newValue) => setTemperature(parseFloat(newValue || \"0.3\"))}\n                        />\n                        <TextField\n                            label=\"Retrieve Count\"\n                            value={retrieveCount.toString()}\n                            onChange={(_, newValue) => setRetrieveCount(parseInt(newValue || \"3\"))}\n                        />\n                    </Stack>\n                </div>\n            </Panel>\n\n            {CHAT_HISTORY_ENABLED && (\n                <HistoryPanel\n                    provider={HistoryProviderOptions.CosmosDB}\n                    isOpen={isHistoryPanelOpen}\n                    notify={false}\n                    onClose={() => setIsHistoryPanelOpen(false)}\n                    onChatSelected={answers => {\n                        setAnswers(answers);\n                        setIsHistoryPanelOpen(false);\n                    }}\n                />\n            )}\n\n            {/* Panel for citations and analysis */}\n            {answers.length > 0 && activeAnalysisPanelTab && (\n                <Panel\n                    headerText=\"Analysis\"\n                    isOpen={activeAnalysisPanelTab !== undefined}\n                    isBlocking={false}\n                    onDismiss={() => setActiveAnalysisPanelTab(undefined)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setActiveAnalysisPanelTab(undefined)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <AnalysisPanel\n                        className={styles.analysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"600px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                </Panel>\n            )}\n\n            {fullScreenAnswer && (\n                <FullScreenAnswer\n                    answer={\n                        <>\n                            <UserChatMessage message={fullScreenAnswer.answer[0]} />\n                            <div className={styles.chatMessageGpt}>\n                                <Answer\n                                    isStreaming={false}\n                                    key={fullScreenAnswer.index}\n                                    answer={fullScreenAnswer.answer[1]}\n                                    index={fullScreenAnswer.index}\n                                    speechConfig={speechConfig}\n                                    isSelected={selectedAnswer === fullScreenAnswer.index && activeAnalysisPanelTab !== undefined}\n                                    onCitationClicked={c => onShowCitation(c, fullScreenAnswer.index)}\n                                    onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, fullScreenAnswer.index)}\n                                    onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, fullScreenAnswer.index)}\n                                    onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                    showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === fullScreenAnswer.index}\n                                    showSpeechOutputAzure={showSpeechOutputAzure}\n                                    showSpeechOutputBrowser={showSpeechOutputBrowser}\n                                />\n                            </div>\n                        </>\n                    }\n                    onClose={() => setFullScreenAnswer(null)}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Chat;\n","import React, { useState, useEffect, useRef, RefObject } from \"react\";\nimport { Outlet, NavLink, Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport styles from \"./Layout.module.css\";\nimport { motion } from \"framer-motion\";\nimport { Toaster } from \"react-hot-toast\";\nimport { HomeIcon, ChartBarIcon, UserIcon, Cog6ToothIcon, Bars3Icon, XMarkIcon } from \"@heroicons/react/24/outline\";\n\nimport { useLogin } from \"../../authConfig\";\n\nimport { LoginButton } from \"../../components/LoginButton\";\nimport { IconButton } from \"@fluentui/react\";\nimport { Github } from \"../../components/Github\";\n\n// GitHub SVG will be inline\n\nconst Layout = () => {\n    const { t } = useTranslation();\n    const [menuOpen, setMenuOpen] = useState(false);\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\n    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n    const toggleMenu = () => {\n        setMenuOpen(!menuOpen);\n    };\n\n    const handleClickOutside = (event: MouseEvent) => {\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n            setMenuOpen(false);\n        }\n    };\n\n    useEffect(() => {\n        if (menuOpen) {\n            document.addEventListener(\"mousedown\", handleClickOutside);\n        } else {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [menuOpen]);\n\n    const navItems = [\n        { to: \"/\", icon: HomeIcon, label: \"Home\" },\n        { to: \"/qa\", icon: ChartBarIcon, label: \"Resume Analysis\" },\n        { to: \"/chat\", icon: UserIcon, label: \"Career Chat\" }\n    ];\n\n    return (\n        <div className=\"flex flex-col min-h-screen bg-gradient-to-br from-secondary-50 to-primary-50\">\n            <Toaster\n                position=\"top-right\"\n                toastOptions={{\n                    duration: 4000,\n                    style: {\n                        background: \"#fff\",\n                        color: \"#1e293b\",\n                        border: \"1px solid #e2e8f0\",\n                        borderRadius: \"12px\",\n                        boxShadow: \"0 10px 40px rgba(0, 0, 0, 0.1)\"\n                    },\n                    success: {\n                        iconTheme: {\n                            primary: \"#10b981\",\n                            secondary: \"#fff\"\n                        }\n                    },\n                    error: {\n                        iconTheme: {\n                            primary: \"#ef4444\",\n                            secondary: \"#fff\"\n                        }\n                    }\n                }}\n            />\n\n            {/* Modern Navigation Header */}\n            <header className=\"relative z-50\">\n                <nav className=\"glass backdrop-blur-md border-b border-white/20 sticky top-0 z-40\">\n                    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n                        <div className=\"flex justify-between items-center h-20\">\n                            {/* Logo */}\n                            <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} className=\"flex items-center space-x-3\">\n                                <Link to=\"/\" className=\"flex items-center space-x-3 group\">\n                                    <div className=\"relative w-16 h-20 bg-gradient-to-r from-primary-600 to-accent-500 rounded-xl flex justify-center items-center shadow-lg group-hover:shadow-xl transition-all duration-300 overflow-visible z-10\">\n                                        {/* Floating emoji for logo */}\n                                        <motion.div\n                                            animate={{ y: [0, -15, 0] }}\n                                            transition={{ duration: 2.5, repeat: Infinity, ease: \"easeInOut\" }}\n                                            className=\"text-2xl absolute left-1/2 -translate-x-1/2\"\n                                        >\n                                            🚀\n                                        </motion.div>\n                                    </div>\n                                    <div className=\"absolute -inset-1 bg-gradient-to-r from-primary-600 to-accent-500 rounded-xl opacity-20 group-hover:opacity-30 blur-lg transition-all duration-300\"></div>\n                                    <div>\n                                        <h1 className=\"text-2xl font-bold bg-gradient-to-r from-primary-600 to-accent-500 bg-clip-text text-transparent\">\n                                            AI Career Navigator\n                                        </h1>\n                                        <p className=\"text-sm text-secondary-500 font-medium\">Your Future Starts Here</p>\n                                    </div>\n                                </Link>\n                            </motion.div>\n\n                            {/* Desktop Navigation */}\n                            <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} className=\"hidden md:flex items-center space-x-2\">\n                                {navItems.map((item, index) => (\n                                    <motion.div\n                                        key={item.to}\n                                        initial={{ opacity: 0, y: -20 }}\n                                        animate={{ opacity: 1, y: 0 }}\n                                        transition={{ delay: index * 0.1 }}\n                                    >\n                                        <NavLink\n                                            to={item.to}\n                                            className={({ isActive }) =>\n                                                `flex items-center space-x-2 px-6 py-3 rounded-xl font-medium transition-all duration-300 ${\n                                                    isActive\n                                                        ? \"bg-primary-600 text-white shadow-lg\"\n                                                        : \"text-secondary-600 hover:bg-white/50 hover:text-primary-600\"\n                                                }`\n                                            }\n                                        >\n                                            <item.icon className=\"h-5 w-5\" />\n                                            <span>{item.label}</span>\n                                        </NavLink>\n                                    </motion.div>\n                                ))}\n                            </motion.div>\n\n                            {/* User Actions */}\n                            <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} className=\"flex items-center space-x-4\">\n                                {/* Settings Button */}\n                                <button className=\"hidden md:flex items-center space-x-2 px-4 py-2 text-secondary-600 hover:text-primary-600 transition-colors duration-300\">\n                                    <Cog6ToothIcon className=\"h-5 w-5\" />\n                                    <span className=\"font-medium\">Settings</span>\n                                </button>\n\n                                {/* GitHub Link */}\n                                <a\n                                    href=\"https://github.com/azure-samples/azure-search-openai-demo\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    className=\"flex items-center space-x-2 px-4 py-2 bg-white/80 backdrop-blur-sm text-secondary-700 hover:text-primary-600 rounded-xl border border-secondary-200 hover:border-primary-300 transition-all duration-300\"\n                                >\n                                    <svg className=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                                        <path\n                                            fillRule=\"evenodd\"\n                                            d=\"M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z\"\n                                            clipRule=\"evenodd\"\n                                        />\n                                    </svg>\n                                    <span className=\"hidden lg:block font-medium\">View on GitHub</span>\n                                </a>\n\n                                {/* Mobile Menu Button */}\n                                <button\n                                    onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                                    className=\"md:hidden p-2 text-secondary-600 hover:text-primary-600 transition-colors duration-300\"\n                                >\n                                    {isMobileMenuOpen ? <XMarkIcon className=\"h-6 w-6\" /> : <Bars3Icon className=\"h-6 w-6\" />}\n                                </button>\n                            </motion.div>\n                        </div>\n                    </div>\n\n                    {/* Mobile Menu */}\n                    <motion.div\n                        initial={false}\n                        animate={{\n                            height: isMobileMenuOpen ? \"auto\" : 0,\n                            opacity: isMobileMenuOpen ? 1 : 0\n                        }}\n                        transition={{ duration: 0.3 }}\n                        className=\"md:hidden overflow-hidden bg-white/90 backdrop-blur-md border-t border-secondary-200\"\n                    >\n                        <div className=\"px-4 py-4 space-y-2\">\n                            {navItems.map(item => (\n                                <NavLink\n                                    key={item.to}\n                                    to={item.to}\n                                    onClick={() => setIsMobileMenuOpen(false)}\n                                    className={({ isActive }) =>\n                                        `flex items-center space-x-3 px-4 py-3 rounded-xl font-medium transition-all duration-300 ${\n                                            isActive ? \"bg-primary-600 text-white\" : \"text-secondary-600 hover:bg-primary-50 hover:text-primary-600\"\n                                        }`\n                                    }\n                                >\n                                    <item.icon className=\"h-5 w-5\" />\n                                    <span>{item.label}</span>\n                                </NavLink>\n                            ))}\n                            <div className=\"border-t border-secondary-200 pt-4 mt-4\">\n                                <button className=\"flex items-center space-x-3 px-4 py-3 w-full text-left text-secondary-600 hover:bg-primary-50 hover:text-primary-600 rounded-xl transition-all duration-300\">\n                                    <Cog6ToothIcon className=\"h-5 w-5\" />\n                                    <span className=\"font-medium\">Settings</span>\n                                </button>\n                            </div>\n                        </div>\n                    </motion.div>\n                </nav>\n            </header>\n\n            {/* Main Content */}\n            <main className=\"relative flex-1 min-h-0\">\n                <Outlet />\n            </main>\n\n            {/* Footer */}\n            <footer className=\"relative mt-20 border-t border-secondary-200 bg-white/50 backdrop-blur-md\">\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n                        {/* About */}\n                        <div className=\"col-span-1 md:col-span-2\">\n                            <div className=\"flex items-center space-x-3 mb-4\">\n                                <div className=\"w-10 h-10 bg-gradient-to-r from-primary-600 to-accent-500 rounded-lg flex items-center justify-center\">\n                                    <span className=\"text-xl\">🎯</span>\n                                </div>\n                                <h3 className=\"text-xl font-bold text-secondary-800\">AI Career Navigator</h3>\n                            </div>\n                            <p className=\"text-secondary-600 mb-4 max-w-md\">\n                                Empowering students and professionals with AI-driven career insights, resume analysis, and personalized interview preparation.\n                            </p>\n                            <div className=\"flex space-x-4\">\n                                <span className=\"inline-flex items-center px-3 py-1 bg-success-100 text-success-700 rounded-full text-sm font-medium\">\n                                    ✨ Free to Use\n                                </span>\n                                <span className=\"inline-flex items-center px-3 py-1 bg-primary-100 text-primary-700 rounded-full text-sm font-medium\">\n                                    🔬 AI-Powered\n                                </span>\n                            </div>\n                        </div>\n\n                        {/* Quick Links */}\n                        <div>\n                            <h4 className=\"font-semibold text-secondary-800 mb-4\">Quick Links</h4>\n                            <div className=\"space-y-2\">\n                                <Link to=\"/\" className=\"block text-secondary-600 hover:text-primary-600 transition-colors duration-300\">\n                                    Home\n                                </Link>\n                                <Link to=\"/qa\" className=\"block text-secondary-600 hover:text-primary-600 transition-colors duration-300\">\n                                    Resume Analysis\n                                </Link>\n                                <Link to=\"/chat\" className=\"block text-secondary-600 hover:text-primary-600 transition-colors duration-300\">\n                                    Career Chat\n                                </Link>\n                            </div>\n                        </div>\n\n                        {/* Resources */}\n                        <div>\n                            <h4 className=\"font-semibold text-secondary-800 mb-4\">Resources</h4>\n                            <div className=\"space-y-2\">\n                                <a href=\"#\" className=\"block text-secondary-600 hover:text-primary-600 transition-colors duration-300\">\n                                    Career Tips\n                                </a>\n                                <a href=\"#\" className=\"block text-secondary-600 hover:text-primary-600 transition-colors duration-300\">\n                                    Interview Guide\n                                </a>\n                                <a href=\"#\" className=\"block text-secondary-600 hover:text-primary-600 transition-colors duration-300\">\n                                    Resume Templates\n                                </a>\n                                <a\n                                    href=\"https://github.com/azure-samples/azure-search-openai-demo\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                    className=\"block text-secondary-600 hover:text-primary-600 transition-colors duration-300\"\n                                >\n                                    GitHub Repository\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"border-t border-secondary-200 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n                        <p className=\"text-secondary-500 text-sm\">© 2024 AI Career Navigator. Built with Azure OpenAI and Microsoft technologies.</p>\n                        <div className=\"flex items-center space-x-6 mt-4 md:mt-0\">\n                            <span className=\"text-sm text-secondary-500\">Powered by:</span>\n                            <div className=\"flex items-center space-x-4\">\n                                <span className=\"text-sm font-medium text-primary-600\">Azure OpenAI</span>\n                                <span className=\"text-sm font-medium text-accent-600\">React</span>\n                                <span className=\"text-sm font-medium text-success-600\">TypeScript</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </footer>\n        </div>\n    );\n};\n\nexport default Layout;\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\nimport { useEffect, useState } from \"react\";\nimport { MsalProvider } from \"@azure/msal-react\";\nimport { LoginContext } from \"./loginContext\";\nimport Layout from \"./pages/layout/Layout\";\n\nconst LayoutWrapper = () => {\n    const [loggedIn, setLoggedIn] = useState(false);\n    if (useLogin) {\n        var msalInstance = new PublicClientApplication(msalConfig);\n\n        // Default to using the first account if no account is active on page load\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\n        }\n\n        // Listen for sign-in event and set active account\n        msalInstance.addEventCallback(event => {\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\n                const account = event.payload as AccountInfo;\n                msalInstance.setActiveAccount(account);\n            }\n        });\n\n        useEffect(() => {\n            const fetchLoggedIn = async () => {\n                setLoggedIn(await checkLoggedIn(msalInstance));\n            };\n\n            fetchLoggedIn();\n        }, []);\n\n        return (\n            <MsalProvider instance={msalInstance}>\n                <LoginContext.Provider\n                    value={{\n                        loggedIn,\n                        setLoggedIn\n                    }}\n                >\n                    <div className=\"flex flex-col min-h-screen\">\n                        <Layout />\n                    </div>\n                </LoginContext.Provider>\n            </MsalProvider>\n        );\n    } else {\n        return (\n            <LoginContext.Provider\n                value={{\n                    loggedIn,\n                    setLoggedIn\n                }}\n            >\n                <div className=\"flex flex-col min-h-screen\">\n                    <Layout />\n                </div>\n            </LoginContext.Provider>\n        );\n    }\n};\n\nexport default LayoutWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { I18nextProvider } from \"react-i18next\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { initializeIcons } from \"@fluentui/react\";\n\nimport \"./index.css\";\n\nimport Chat from \"./pages/chat/Chat\";\nimport LayoutWrapper from \"./layoutWrapper\";\nimport i18next from \"./i18n/config\";\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: <LayoutWrapper />,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/ask/Ask\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <I18nextProvider i18n={i18next}>\n            <HelmetProvider>\n                <RouterProvider router={router} />\n            </HelmetProvider>\n        </I18nextProvider>\n    </React.StrictMode>\n);\n"],"file":"assets/index-RMsKCvji.js"}